:toc: macro
toc::[]

= Gulp Tasks

The following top-level Gulp tasks have been configured as a foundation of the client-side development.
You can execute them by typing +gulp <task-name>+, where +<task-name>+ is a placeholder for the given task's name.
More information on Gulp (the streaming build system) can be found http://gulpjs.com/[here].

== Serve

+serve+ builds and starts the development server with livereload (live reloading of changed files)

=== serve dist

+serve:dist+ builds and starts the production server

=== Detailed description

+serve+ vs +serve dist+

|=======
|*step type*   |*serve*        |*serve:dist*
|build         |build:develop  |build:dist
|connection    |configureProxies:server  |configureProxies:server
|connection    |connect:develop|connect:dist
|livereload    |watch          |-
|=======

=== Subtasks description

* +build:develop+ - builds the development version (in the .tmp directory, with HTTP-response caching turned off)
* +build:dist+ - builds the deployment version (in the app directory, with HTTP caching on)
* +configureProxies:server+ - configures the http proxy
* +connect:develop/dist+
* +watch+ - turns resource livereload on (html and css)

== Build

=== build develop

`build:develop` performs a development build: cleans targets, moves & converts project resources (js, html, less/css) and injects bower components.

It works in the +.tmp+ directory.

=== build dist

`build:dist` performs a distribution build: in addition to development tasks it also:

* annotates angular injections,
* optimizes scripts and stylesheets,
* compresses css files,
* works in the +app+ directory.

=== build develop vs build dist

[width="50%",options="header",cols="e,>,>"]
|=======
|*step type*   |*build:develop*|*build:dist*
|clean         |clean:develop  |clean:dist
|copy/convert  |sprite         |sprite
|copy/convert  |less:develop   |less:dist
|angular       |html2js        |html2js
|bower         |wiredep        |wiredep
|optimization  |-              |useminPrepare
|optimization  |-              |concat
|angular       |-              |ngAnnotate
|copy/convert  |copy:develop   |copy:dist
|minification  |-              |uglify
|optimization  |-              |usemin
|=======

=== Subtask description

* clean:develop/dist - performs a clean
* sprite - create css sprites
* less:develop/dist - copies the css
* html2js
* wiredep - injects bower components
* copy:develop/dist - copies resources (like html/, i18n/, img/)
* useminPrepare - prepares stylesheet and script references for optimization
* usemin - optimizes stylesheets and scripts
* concat - concatenates resource files
* ngAnnotate - annotates angular injections
* uglify - minifies files

== Tests

=== build ci

`build:ci` performs a distribution build and runs a full CI test (link:gulp-task-build#build-dist[build:dist], karma:ci)

=== test

`test` runs jslint on the code and runs a single run of unit tests (jslint, karma:ci)

=== test tdd

`test:tdd` runs karma JUnit tests and keeps the testserver up (karma:unit)

=== test tdd debug

`test:tdd:debug` runs karma JUnit tests in debug mode (Chrome browser) and keeps the testserver up, (karma:unit_chrome)

=== Subtask description

* build:dist
* jslint - run jslint checks on the code
* karma:ci - runs a single run of unit tests defined in karma.conf.js
* karma:unit - runs karma.conf.js tests and keeps the testserver up
* karma:unit_chrome - runs karma.conf.js tests a Chrome browser window and keeps the testserver up
** autoWatch options (karma.conf.js) defines if source files are to be watched for changes.

== ng docs

=== ngdocs

`ngdocs` performs a docs build
