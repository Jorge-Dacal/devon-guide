:toc: macro
toc::[]

= The i18n module

== Introduction

Internationalization (also called "i18n , meaning "i-eighteen letters-n") is the process of designing the software application which can potentially adapt to various languages and regions without engineering changes.

The internationalization process is sometimes called translation or localization enablement.

== The i18n IP Module

The i18n module provides an easy creation and maintenance of the distinct translations for the Devon applications. Using i18n module, you will be able to leverage MMM/devonfw features for internationalization by following a few steps and  avoiding the complex details of the implementation.

=== Adding the i18n module dependency in the project
To access the functionality of the i18n module, you will need to include its dependency in project's pom.xml

[source,xml]
----
<dependency>
  <groupId>com.capgemini.devonfw.modules</groupId>
  <artifactId>devonfw-i18n</artifactId>
  <version>2.1.0-SNAPSHOT</version>
</dependency>
----

[WARNING]
====
The IP modules of Devonfw are stored in the https://www.jfrog.com/artifactory/[Artifactory] service provided by Capgemini Shared Services. In case, you do not have access to that repository, as the modules are included in the Devonfw distribution, you can install them manually. To do so, open a Devonfw command line (_console.bat_), go to `Devon-dist\workspaces\examples\devon` and execute the command `mvn install`.
If the project is already imported in Eclipse then update project: Right click on _project_ > _Maven_ > _Update Project_ > check the _Force update of Snapshot/Releases_ checkbox > _Ok_
====

=== Adding ComponentScan annotation

Remember to add the package of the module to the `@ComponentScan` annotation in the Spring Boot main class.

[source,java]
----
@ComponentScan(basePackages = { "com.capgemini.devonfw.module.i18n" , "my.other.components.package" })
----

=== Reading property files via default implementation provided by i18n module

In Spring applications, "locales" are standard Java property files that contain the translation of the application's text as well as the display format of the elements namely dates, numbers etc. These property files are located in _src/main/resources/locale_ as shown below:

image::images/devonfw-i18n/locale_path.png[,width="350",locale path, link="images/devonfw-i18n/locale_path.png"]

These properties files store the information in the form of key value pairs. The i18n module of devonfw exposes a REST service to request the locale (information in the property files) in JSON format. Users can also request part of the locale by applying a filter. The filter should have the following format: 

[source,xml]
----
<service root>/locale/en_US?filter=main.info. 
----

The returned JSON will have nested objects and will have the following format:

[source,json]
----
{
  "main": {
     "intro":{
        "name": "Devon fw control panel",
	     â€¦ etc etc ...
      }
   }
}
----
 
=== Reading property files via MMM implementation

_net.sf.mmm.util.nls.base.ResourceBundleSynchronizer_  is used to create .properties files for the locales via MMM implementation.

==== Instructions to create locales, property files, via MMM

This process produces locale files at the following location: _\src\main\resources\com\capgemini\devonfw\module\i18n\common\api\nls_

- Right click on 'i18n' module.
- Go to Run As > Run Configurations 
- Right click on 'Java Application' 
- Click on 'New'
- In the displayed dialog box, provide the name for the configuration (eg. _ResouceBundleSyncronizer_) and provide main class name as _net.sf.mmm.util.nls.base.ResouceBundleSyncronizer_.


image::images/devonfw-i18n/ResourceBundleSync_Main.png[,width="350",ResourceBundleSync_Main,link="images/devonfw-i18n/ResourceBundleSync_Main.png"]


- Click on _Arguments_ tab besides Main tab.
- Enter program Arguments as "--locale <locale>" eg. "--locale en"

image::images/devonfw-i18n/ResourceBundleSync_argument.png[,width="350",ResourceBundleSync_argument,link="images/devonfw-i18n/ResourceBundleSync_argument.png"]


- Apply the changes and click 'Run' button.

File _config.properties_ provides a flag value true/false, which is used to switch between the default implementation and the MMM implementation.

[source,xml]
----
i18n.mmm.enabled=true
----

=== Build Project and Run

Perform Clean & Build operations for the project in eclipse and launch _SpringBootApp.java_. You can view i18n REST service in available REST webservices (http://localhost:8081/oasp4j-sample-server/services/rest/). 

=== Test i18n REST Service

To test i18n REST service, the general format of the service is as follows:

[source,xml]
----
General Format : <service root>/i18n/locales/<local indicator>
eg. localhost:8081/oasp4j-sample-server/services/rest/i18n/locales/en_US
----