:toc: macro
toc::[]

# The I18N (Internationalization) module


Internationalization (sometimes shortened to "I18N , meaning "I - eighteen letters -N") is the process of designing a software application so that it can potentially be adapted to various languages and regions without engineering changes.

The internationalization process is sometimes called translation or localization enablement.

## I18N Module Information 

### Reading properties files without MMM integration

*Conceptual Schema :*

image::images/devonfw-i18n/conceptual_schema_without_mmm_impl.png[,width="350",conceptual_schema_without_mmm_impl,link="https://github.com/devonfw/devon-guide/wiki/images//devonfw-i18n/conceptual_schema_without_mmm_impl.png"]

In Spring applications “locales” are the standard java property files which contain the translations of the applications texts as well as display format of elements like dates, numbers etc. These are placed at location _src/main/resources/locale_

image::images/devonfw-i18n/locale_path.png[,width="350",locale path,link="https://github.com/devonfw/devon-guide/wiki/images//devonfw-i18n/locale_path.png"]

These properties files stores the information in the form of key value pair. The I18N module provides the utility which converts these file entries in respective json format and sent back as a response to the HTTP GET request.
 

### Reading properties files with MMM integration 

*Conceptual Schema :*

image::images/devonfw-i18n/conceptual_schema_with_mmm_impl.png[,width="350",conceptual_schema_with_mmm_impl,link="https://github.com/devonfw/devon-guide/wiki/images//devonfw-i18n/conceptual_schema_with_mmm_impl.png"]

The dependency for "net.sf.m-m-m" has been added in _pom.xml_ of a module. 

[source,xml]
----
 <dependency>
    <groupId>net.sf.m-m-m</groupId>
    <artifactId>mmm-util-cli</artifactId>
    <version>7.0.0</version>
 </dependency>
----

This provides class _ResourceBundleSynchronizer_ which is used to create .properties files for MMM implementation with respect to the locales.
Below snapshots shows how it creates .properties files at location 
_\src\main\resources\com\capgemini\devonfw\module\i18n\common\api\nls_

image::images/devonfw-i18n/ResourceBundleSync_Main.png[,width="350",ResourceBundleSync_Main,link="https://github.com/devonfw/devon-guide/wiki/images//devonfw-i18n/ResourceBundleSync_Main.png"]

image::images/devonfw-i18n/ResourceBundleSync_argument.png[,width="350",ResourceBundleSync_argument,link="https://github.com/devonfw/devon-guide/wiki/images//devonfw-i18n/ResourceBundleSync_argument.png"]

Below configuration is provided to make mmm implementation enabled or disabled.

File _config.properties_ provides flag which is used to enable/disable mmm implementation .

[source,xml]
----
i18n.mmm.enabled=true
----

## Integrate I18N module to your project

The I18N module provides easy creation and maintenance of distinct translations for your Devon applications. To implement the I18N module in a your project you must follow these steps:

### Adding the dependency in our project.

Include the module dependency in your pom.xml
[source,xml]
----
<dependency>
  <groupId>com.capgemini.devonfw.modules</groupId>
  <artifactId>devonfw-i18n</artifactId>
  <version>2.1.0-SNAPSHOT</version>
</dependency>
----


### Adding @ComponentScan to the class level

Add class level annotation to the below mentioned class.

[source,xml]
----
@ComponentScan(basePackages = { "com.capgemini.devonfw.module" })
public class ServiceConfiguration extends WsConfigurerAdapter {
}
----

### Build Project and Run

Perform the operations clean & build for the project. Run the SpringBootApp.java file as java application and make the server up. You can see the i18n webservice in available webservices.


 



