:toc: macro
toc::[]

= The i18n module

== Introduction

Internationalization (sometimes shortened to "i18n , meaning "i-eighteen letters-n") is the process of designing a software application so that it can potentially be adapted to various languages and regions without engineering changes.

The internationalization process is sometimes called translation or localization enablement.

== The i18n IP Module

The i18n module provides easy creation and maintenance of distinct translations for your Devon applications . So, by including it in your project, you will be able to leverage MMM/devonfw features for internationalization by following few steps, avoiding the complex details of the implementation.

=== Adding the i18n module dependency to your project
To get access to the functionality of the i18n module you will need to include its dependency in your project's pom.xml

[source,xml]
----
<dependency>
  <groupId>com.capgemini.devonfw.modules</groupId>
  <artifactId>devonfw-i18n</artifactId>
  <version>2.1.0-SNAPSHOT</version>
</dependency>
----

[WARNING]
====
The IP modules of Devonfw are stored in https://www.jfrog.com/artifactory/[Artifactory]. In case you do not have access to that repository, as the modules are included in the Devonfw distribution, you can install them manually. To do so open a Devonfw command line (_console.bat_), go to `Devon-dist\workspaces\examples\devon` and execute the command `mvn install`.
If project is already imported in Eclipse then update project: Right click on _project_ > _Maven_ > _Update Project_ > check the _Force update of Snapshot/Releases_ checkbox > _Ok_
====

=== Adding @ComponentScan to the class level

Don't forget to add the following class level @ComponentScan annotation in the class _io.oasp.application.i18nSampleApp.general.configuration.ServiceConfiguration.java_ 

[source,xml]
----
@ComponentScan(basePackages = { "com.capgemini.devonfw.module" })
public class ServiceConfiguration extends WsConfigurerAdapter {
}
----

=== Reading property files via Default implementation provided by i18n module

In Spring applications, "locales" are standard java property files that contain the translations of the applications texts as well as display format of elements namely dates, numbers etc. These property files are located at _src/main/resources/locale_

image::images/devonfw-i18n/locale_path.png[,width="350",locale path, link="images/devonfw-i18n/locale_path.png"]

These properties files store the information in the form of key value pair. The i18n module of devonfw exposes a REST service to request the locale (information in the property files) in JSON format. Users can also request part of the locale by applying a filter. The filter should have the following format 

<service root>/locale/en_US?filter=main.info. 

The returned JSON will have nested objects and will have the following format

[source,xml]
----
{
  “main”: {
     “intro”:{
        “name”: “Devon fw control panel”,
	     … etc etc ...
      }
   }
}
----
 
=== Reading properties files via MMM implementation

_net.sf.mmm.util.nls.base.ResourceBundleSynchronizer_  is used to create .properties files for the locales via MMM implementation.

* Instructions to create locales (property files) via MMM :*

This process produces locale files at location _\src\main\resources\com\capgemini\devonfw\module\i18n\common\api\nls_

1. Right click on 'i18n' module.
2. Go to Run As > Run Configurations... --> Right click on _Java Application_ --> click on New --> Provide name for the configuration (eg. ResouceBundleSyncronizer) --> Provide main class name as _net.sf.mmm.util.nls.base.ResouceBundleSyncronizer_


image::images/devonfw-i18n/ResourceBundleSync_Main.png[,width="350",ResourceBundleSync_Main,link="images/devonfw-i18n/ResourceBundleSync_Main.png"]


3. Click on _Arguments_ tab besides Main tab.
4. Enter program Arguments as "--locale <locale>" eg. "--locale en"

image::images/devonfw-i18n/ResourceBundleSync_argument.png[,width="350",ResourceBundleSync_argument,link="images/devonfw-i18n/ResourceBundleSync_argument.png"]


5. Apply the changes and click 'Run' button.

File _config.properties_ provides flag value true/false, which is used to switch between default implementation and MMM implementation.

[source,xml]
----
i18n.mmm.enabled=true
----

=== Build Project and Run

Perform the operations clean & build for your project in eclipse and launch _SpringBootApp.java_. You can view i18n REST service in available REST webservices (http://localhost:8081/oasp4j-sample-server/services/rest/). 

=== Webservice test :

To test i18n REST service, the general format of the service will be as follows:

[source,xml]
----
General Format : <service root>/i18n/locales/<local indicator>
eg. localhost:8081/oasp4j-sample-server/services/rest/i18n/locales/en_US
----