:toc: macro
toc::[]

# The Reporting module - Report generation with JasperReports

Reporting is a fundamental part of the larger movement towards improved business intelligence and knowledge management. Often implementation involves extract, transform, and load (ETL) procedures in coordination with a data warehouse and then using one or more reporting tools. With this module Devon provides an implementation of one of these reporting tools based on the Jasper Reports library.

JasperReports is an open source Java reporting tool that can write to a variety of targets, such as: screen, a printer, into PDF, HTML, Microsoft Excel, RTF, ODT, Comma-separated values or XML files.
It can be used in Java-enabled applications, including Java EE or web applications, to generate dynamic content. It reads its instructions from an XML or .jasper file.

For more information visit http://community.jaspersoft.com/project/jasperreports-library[JasperReports]


== Include Reporting in a Devon project

The Reporting module provide you with a report generation for your Devon applications. For implement the Reporting module in a Devon project you must follow these steps:

=== Step 1: Adding the dependency in our project

Include the module dependency in your pom.xml
[source,xml]
----
<dependency>
  <groupId>com.capgemini.devonfw.modules</groupId>
  <artifactId>devonfw-reporting</artifactId>
  <version>2.1.0-SNAPSHOT</version>
</dependency>
----

=== Step 2: Properties configuration (only if you are going to generate _.txt_ reports)

In order to use the Reporting module for creating txt reports is necessary to define some parameters related to the size of the elements in the application.properties file of the project.
[source,xml]
----
# Reporting module params
devon.reporting.txtConfig.CharWidth=7
devon.reporting.txtConfig.CharHeight=13.9
devon.reporting.txtConfig.PageWidthInChars=80
devon.reporting.txtConfig.PageHeightInChars=47
----
 
== Basic implementation

First of all we will need to add the scanner for dependency injection. To do so, in the _SpringBoot_ main class, we must add the following annotations

[source,java]
----
@Configuration
@ComponentScan(basePackages = { "com.capgemini.devonfw.module.reporting" })
@EnableAutoConfiguration
public class MyBootApp {

    [...]
----

As you can see the _basePackages_ of the _@ComponentScan_ points to the Reporting module package so now we can start using the module.

=== The injection of the module

To access to the module's functionalities we need to inject the module in a private property, we will do this using the _@Inject_ annotation

[source,java]
----
public class MyClass {

    @Inject
    private Reporting<Map> reportManager;

    [...]

----

After that we can use that `reportManager` object in order to access to the module functionalities, we will see how later.

=== The Report entity

Basically for configuring the report we will need to instantiate a `Report` object and define only two properties:

- the data: the information that the report should show.

- the template: the _.jrxml_ file that the report engine will use to format, order and set the style of the report.

[source,java]
----
Report myReport = new Report();

myReport.setData(getMockData());
myReport.setTemplatePath("path\to\the\template\fooTemplate.jrxml");
----

The _setData_ method needs a *collection of HashMap* with the pairs key/value to bind template fields with the data.

In the _setTemplatePath_ we need to pass the location of the template to be used to create the report. You can learn more about how to create Jasper templates http://community.jaspersoft.com/documentation/tibco-jaspersoft-studio-user-guide/v60/report-templates[here] and http://community.jaspersoft.com/wiki/creating-custom-template-jaspersoft-studio[here] 

In the `Report` object we can also add parameters to be used from within the template
[source,java]
----
HashMap<String, Object> params = new HashMap<>();
params.put("ReportTitle", "Foo");
params.put("ReportDescription", "Report generated using the Devon Reporting module");

myReport.setParams(params);
----

=== Using the reportManager

Once we have the `Report` object defined and configured we can generate the report. Following example shows a basic implementation for the creation of a report in pdf file

[source,java]
----
File file = new File("D:\\Temp\\pdf_Report.pdf");
reportManager.generateReport(myReport, file, ReportFormat.PDF);
----

So once the Report object is defined the report generation is very simple, it only needs:

* a report manager (the object with the injection of the module).

* the `Report` object with the _data_ and the _template_ defined. 

* a file to _write_ the report results.

* a format for the report (you can choose between pdf, xls, xlsx, doc, docx, txt, html, Pptx and several more).

== Working with templates

As we have saw in the previous sections the Reporting module works using the _Jasper Reports_ templates. This templates are basically _xml_ files (with extension _jrxml_) with some custom structure.

=== The parts of a template

The _jrxml_ templates are divided in several blocks of information. These blocks can be of two types:

- blocks with static information.

- blocks with dynamic information.

The static information is the information defined by the template itself or by the parameters passed to the template and it remains unchanged over the different _pages_ of the report.

The dynamic information is the information defined by the _data_ that we are passing to the `Report` object as our report main content.

A basic _jrxml_ structure would be like that

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<jasperReport xmlns="http://jasperreports.sourceforge.n..........>
  <parameter .... />
  <parameter .... />
  <field  .... />
  <field  .... />
  <field  .... />

  <title> [...] </title>

  <pageHeader> [...] </pageHeader>

  <columnHeader> [...] </columnHeader>

  <detail> [...] </detail>
  
  <columnFooter> [...] </columnFooter>

  <pageFooter> [...] </pageFooter>
  
  <summary> [...] </summary>

</jasperReport>
----

- *title* tag: will store static information and will appear only once in the first page of the report.

- *pageHeader* tag: will contain static information and will appear on every report page in the top of the page.

- *columnHeader* tag: will show static information and will appear on every report page just above the _detail_ info.

- *detail* tag: will contain the dynamic content of the report and will be repeated (in row format) so many times as the ocurrences of the data that we have passed in the _setData_ method. The detail will fill the page report and continue in following pages if is necessary.

- *columnFooter* tag: will show static information and will appear on every report page just below the _detail_ info, at the end of the detail info gap in every report page.

- *pageFooter* tag: will contain static information and will appear on every report page in the bottom of the page.

=== Defining parameters

We will define the parameters in the templates in this way and after the `<jasperReport>` tag.

[source, xml]
----
<parameter name="ReportTitle" class="java.lang.String"/>
<parameter name="ReportDescription" class="java.lang.String"/>
----

=== Using parameters in the template

After the parameter definition we can use the parameters within the template with a structure like the following 

[source, xml]
----
<textField>
  <reportElement .... />
  <textElement>
  </textElement>
  <textFieldExpression><![CDATA[$P{ReportTitle}]]></textFieldExpression>
</textField>
----


=== Defining Fields

The fields are the elements linked with the report dynamic data. We will define the fields in the templates in this way and after the `<jasperReport>` tag.

[source, xml]
----
<field name="ID" class="java.lang.Integer"/>
<field name="Name" class="java.lang.String"/>
----

=== Using fields in the template

After the field definition we will use the fields inside the `<detail>` tag as part of the dynamic data.

[source, xml]
----

[...]

<detail>
    <band .... >
      <line>
        <reportElement .... />
      </line>
      <textField .... >
        <reportElement .... />
        <textElement>
          <font size= .... />
        </textElement>
        <textFieldExpression class="java.lang.Integer"><![CDATA[$F{ID}]]></textFieldExpression>
      </textField>
      <textField .... >
        <reportElement .... />
        <textElement>
          <font size= .... />
        </textElement>
        <textFieldExpression class="java.lang.String"><![CDATA[$F{Name}]]></textFieldExpression>
      </textField>

      [...]
----

=== Creating templates with GUI software

Working with _xml_ can be sometimes complex and it adds a layer of difficulty when trying to visualize a graphic result. For that reason Jaspersoft provides a software to manage the Reports and this software includes a complete functionality to generate and export _jrxml_ templates.

We are talking about Jaspersoft Studio and you can get it from the Jaspersoft site http://community.jaspersoft.com/project/jaspersoft-studio[here].

In the same way the Jaspersoft site provides the users with many documentation and examples of how to use Jaspersoft studio, how to install it and how to generate templates:

- http://community.jaspersoft.com/wiki/getting-started-jaspersoft-studio[Getting Started with Jaspersoft Studio]

- http://community.jaspersoft.com/wiki/designing-report-jaspersoft-studio[Designing a Report with Jaspersoft Studio]

- http://community.jaspersoft.com/wiki/creating-custom-template-jaspersoft-studio[Creating a custom template with Jaspersoft Studio]


== Subreports

A subreport is a report included inside another report. This allows the creation of very complex layouts with different portions of a single document filled using different data sources and reports. To know more about subreports you can visit http://community.jaspersoft.com/wiki/subreports[this link].

A basic example of the subreports usage with the Reporting module:
[source,java]
----
File file = File.createTempFile("subreport_", ".pdf");
this.reportManager.generateSubreport(masterReport, subreports, file, ReportFormat.PDF);
----

* the _masterReport_ is the report that will house the sub-reports. It is defined as explained in the previous section.
* the _subreports_ is a List of reports to be included within the main report.
* the rest of parameters are explained in the previous section.

===== Defining a Subreport

The subreport definition is the same as for a regular report, the only point that we must be aware of is defining the _setDataSourceName_.

[source,java]
----
List<Report> subreports = new ArrayList<>();

[...]

Report sureport01 = new Report();
sureport01.setName("subreport01");
sureport01.setDataSourceName("subreport01DataSource");
sureport01.setData(getSubreport01MockData());
sureport01.setTemplatePath(path\to\the\template\sureport01Template.jrxml);
this.subreports.add(sureport01);
----

The _DataSourceName_ is the name that later will be used to bind the subreport with its data so it has to be defined also in the master report template in order to pass it to the subreport as a parameter.

[source,xml]
----
[...]

<parameter name="subreport01" class="net.sf.jasperreports.engine.JasperReport"/>
<parameter name="subreport01DataSource" class="net.sf.jasperreports.engine.JRDataSource" />

[...]

<subreport>
    <reportElement .... />
    <dataSourceExpression><![CDATA[$P{subreport01}]]></dataSourceExpression>
    <subreportExpression><![CDATA[$P{subreport01DataSource}]]></subreportExpression>
</subreport>
----

===== How to pass a parameter to a subreport

We can pass a parameter to a subreport using the _setParams_ method of the master report.
[source,java]
----
// We will have a HashMap for "global" parameters
HashMap<String, Object> allParams = new HashMap<>();
----

Then, when defining a subreport we can add its parameters to the _global_ parameters
[source,java]
----
HashMap<String, Object> subreport01Params = new HashMap<>();
subreport01Params.put("City", "Valencia");
allParams.putAll(subreport01Params);
----

And during the master report definition:
[source,java]
----
this.masterReport.setParams(allParams);
----

Finally, in the master report template we will define the parameter and pass it to the subreport
[source,xml]
----
[...]

<parameter name="City" class="java.lang.String" />

[...]

<subreport>
    <reportElement .... />
    <subreportParameter name="City">
        <subreportParameterExpression><![CDATA[$P{City}]]></subreportParameterExpression>
    </subreportParameter>
    <dataSourceExpression .... />
    <subreportExpression .... />
</subreport>
----

=== Concatenated reports

Other functionality of the Reporting module is to generate concatenated reports. A concatenated report is a set of reports _printed_ in a single file. In other words you can have several reports and generate a single file to contain them all.

A basic example of this:
[source,java]
----
this.reportManager.concatenateReports(reports, file, ReportFormat.PDF);
----
The _reports_ parameter is a List of _Report_ objects. The rest of the parameters are the same as explained in previous sections.