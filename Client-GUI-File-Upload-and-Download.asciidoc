:toc: macro
toc::[]

= File Upload and Download

== Syncronous File Upload

Syncronous File Upload means 'uploading all the files to the server in a single request at the same time.'


To enable multiple files upload, you need to add multiple attribute to input of type file and it will be enabled automatically.
And the template would look something like:

[source,bash]
----
<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<body>
<form method="post" action="WEBSERVICE_URL" enctype="multipart/form-data">
    <table align="center" border="1" bordercolor="black" cellpadding="0" cellspacing="0">
        <tr>
            <td>Select File:</td>
            <td>
               <input type="file" multiple="true" name="uploadedFile" size="100" />
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
               <input type="file" multiple="true" name="uploadedFile" size="100" />
            </td>
        </tr>
        <tr>
            <td>
                <input type="submit" value="Upload File" />
            </td>
        </tr>
    </table>
</form>
</body>
</html>

----

Browser renders the above html as shown in the screen shot below.

image::images/client-gui-sencha/file_upload_syncronous.png[,width="350",File Upload Syncronous,link="https://github.com/devonfw/devon-guide/wiki/images/client-gui-sencha/file_upload_syncronous.png"]

Click on "Choose files" button. Dialog box will appear as below, select the files to be uploaded.

image::images/client-gui-sencha/Choose_files_dialog.png[,width="400",Choose file dialog,link="https://github.com/devonfw/devon-guide/wiki/images/client-gui-sencha/Choose_files_dialog.png"]

The total count of selected files will be displayed as,

image::images/client-gui-sencha/selected_files_upload_syncronous.png[,width="350",selected files upload,link="https://github.com/devonfw/devon-guide/wiki/images/client-gui-sencha/selected_files_upload_syncronous.png"]

Click on button "Upload File" to upload the selected files.

== Asyncronous File Upload

Asyncronous File Upload means 'uploading all the files to the server in a separate request per file, which will not occur at the same time.'

For asynchronous file upload, use 'ng2-file-upload' project from velor-software. Below are the steps to follow:

. Clone or download project from https://github.com/valor-software/ng2-file-upload
. Run command 'npm install' at project root path to download node_modules.
. Run command 'npm start' at project root path.
. Running application will be available at http://localhost:3000/ 


image::images/client-gui-sencha/ng2-file-upload.png[,width="450",File Upload Asyncronous,link="https://github.com/devonfw/devon-guide/wiki/images/client-gui-sencha/ng2-file-upload.png"]


You can choose single/multiple files from the buttons 'Choose File/Files' OR you can drag and drop files into the drop zones. All the files will be added to the upload queue. Now you can upload the files to the server.


image::images/client-gui-sencha/ng2-file-upload-fileupload.png[,width="450",File Upload Asyncronous,link="https://github.com/devonfw/devon-guide/wiki/images/client-gui-sencha/ng2-file-upload-fileupload.png"]


To integrate this project with the customized webservice for file upload, follow below steps:

. Navigate to '\demo\components\file-upload' folder from project root.
. Open file 'simple-demo.ts'.
. Edit variable 'URL' with the webservice URL. It will look like 
[source,bash]
----
const URL = '<WEBSERVICE_URL>';
----
. Restart the server to reflect the changes.

*Sometimes you can face cross-browser issue*
Error : "Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource."

Cause of the problem : 
Higher versions of Google chrome browser sends the empty string for the request header parameter "Access-Control-Request-Headers".This parameter is added by Google chrome, which is not seen for other browsers.

image::images/client-gui-sencha/Cause-Access-control-request-header.png[,width="450",Cause-Access-control-request-header,link="https://github.com/devonfw/devon-guide/wiki/images/client-gui-sencha/Cause-Access-control-request-header.png"]

Solution:
Google chrome extention "Change HTTP Request Header" can be used to solve this problem.

1) Add "Change HTTP Request Header" extention to google chrome and enable it.
2) Set the value for parameter "Access-Control-Request-Headers" .For example "content-type".
3) Restart browser.
4) Hit the webservice again.





== File Download

To enable file download, create anchor tag and provide 'href' as an attribute. Provide the web service URL for this attribute to download the file.

Below is the template for anchor tag.

[source,bash]
----
<a class="btn btn-success" href='<WEBSERVICE-URL>'>File Download</a>
----
