:toc: macro
toc::[]

= File Upload and Download

== Synchronous File Upload

Synchronous File Upload is uploading files to the server in a single request at the same time.


To enable multiple files upload, you need to add multiple attribute to input of type file and it will be enabled automatically.
And the template would look something like:

[source,bash]
----
<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<body>
<form method="post" action="WEBSERVICE_URL" enctype="multipart/form-data">
    <table align="center" border="1" bordercolor="black" cellpadding="0" cellspacing="0">
        <tr>
            <td>Select File:</td>
            <td>
               <input type="file" multiple="true" name="uploadedFile" size="100" />
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
               <input type="file" multiple="true" name="uploadedFile" size="100" />
            </td>
        </tr>
        <tr>
            <td>
                <input type="submit" value="Upload File" />
            </td>
        </tr>
    </table>
</form>
</body>
</html>

----

Browser renders the above html as shown in the screen shot below.

image::images/client-gui-sencha/file_upload_syncronous.png[,width="350",File Upload Syncronous,link="images/client-gui-sencha/file_upload_syncronous.png"]

Click on "Choose files" button. Dialog box will appear as below, select the files to be uploaded.

image::images/client-gui-sencha/Choose_files_dialog.png[,width="400",Choose file dialog,link="images/client-gui-sencha/Choose_files_dialog.png"]

The total count of selected files will be displayed as,

image::images/client-gui-sencha/selected_files_upload_syncronous.png[,width="350",selected files upload,link="images/client-gui-sencha/selected_files_upload_syncronous.png"]

Click on button "Upload File" to upload the selected files.

== Asynchronous File Upload

Asynchronous File Upload is uploading files to the server in a separate request per file.

For asynchronous file upload in Angular2, use 'ng2-file-upload' package from valor-software. In order to use this package, execute following command line instructions:

. git clone --recursive https://github.com/valor-software/ng2-file-upload.git 
  (OR download v1.1.3-0.zip from https://github.com/valor-software/ng2-file-upload/releases)
. cd <Root directory of the package that is downloaded by executing above command>
. npm install  
. npm start


After executing the above said instructions, ng2-file-upload application will be available at http://localhost:3000/ .


image::images/client-gui-sencha/ng2-file-upload.png[,width="450",File Upload Asyncronous,link="images/client-gui-sencha/ng2-file-upload.png"]


In the above screen, you can choose single/multiple files from the buttons 'Choose File/Files' or you can drag and drop files into the drop zones. All the files will be added to the upload queue. To upload a single file, click 'Upload' button. To upload multiple files, click 'Upload All' button.


image::images/client-gui-sencha/ng2-file-upload-fileupload.png[,width="450",File Upload Asyncronous,link="images/client-gui-sencha/ng2-file-upload-fileupload.png"]


One can face cross browser issues with header 'Access-Control-Allow-Origin' in Google Chrome for instance.
More details on this issue follows:

*Error :*
"Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource."

*Cause of the problem :*
Higher versions of Google chrome browser sends the empty string for the request header parameter "Access-Control-Request-Headers".This parameter is added by Google chrome, which is not seen for other browsers.

image::images/client-gui-sencha/Cause-Access-control-request-header.png[,width="450",Cause-Access-control-request-header,link="images/client-gui-sencha/Cause-Access-control-request-header.png"]


*Solution :*
Google chrome extention "Change HTTP Request Header" can be used to fix this issue.

1) Add "Change HTTP Request Header" extention to google chrome and enable it.

2) Set the value for parameter "Access-Control-Request-Headers" .For example "content-type".


image::images/client-gui-sencha/Extension-Change-http-request-header.png[,width="450",Extension-Change-http-request-header,link="images/client-gui-sencha/Extension-Change-http-request-header.png"]


3) Restart browser

To validate the extension "Change HTTP Request Header"  is added to the Google Chrome correctly, hit the service URL once again.

Press 'F12' and see the result in network tab of the browser debugger. The value for parameter 'Access-Control-Request-Headers' should not be empty.

image::images/client-gui-sencha/Result_Google_Chrome.png[,width="450",Result_Google_Chrome,link="images/client-gui-sencha/Result_Google_Chrome.png"]




== File Download

To enable file download, create anchor tag and provide 'href' as an attribute. Provide the web service URL for this attribute to download the file.

Below is the template for anchor tag.

[source,bash]
----
<a class="btn btn-success" href='<WEBSERVICE-URL>'>File Download</a>
----

= Appendix
== Code change for File Upload Package

* To integrate this package with the customized webservice for file upload (that is developed in your application), follow below steps:

* cd '\demo\components\file-upload' (from package root).
* Open file 'simple-demo.ts'.
* Edit variable 'URL' with the webservice URL. It will look like 
[source,bash]
----
const URL = '<WEBSERVICE_URL>';
----

[source,bash]
----
// default code from package
const URL = 'https://evening-anchorage-3159.herokuapp.com/api/';
---- 

[source,bash]
----
// new code change : connecting to the customized web-service
const URL = 'WEBSERVICE-URL';
----

* 'npm start' (Restart the server to reflect the change).

* If you face above mentioned cross browser error, add headers content to the code as mentioned below.

Error: "Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource."

Add below mentioned changes in file '\components\file-upload\file-uploader.class.ts'

[source,bash]
----
// default code from package
public options:FileUploaderOptions = {
    autoUpload: false,
    isHTML5: true,
    filters: [],
    removeAfterUpload: false,
    disableMultipart: false
};
---- 


[source,bash]
----
// new code change : Added headers
public options:FileUploaderOptions = {
    autoUpload: false,
    isHTML5: true,
    filters: [],
    removeAfterUpload: false,
    disableMultipart: false,
    headers: [{name: "dummy", value: "dummy"}]
};
----



