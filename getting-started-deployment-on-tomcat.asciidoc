:toc: macro 
toc::[]


= Deployment on Tomcat (Client/Server)
After setting up functional server and client applications, we may want to package both in the same _.war_ file. To package the single war, follow the given steps.

== General description of the packaging process
The application packaging is based on _Maven_ _package_ functionality. The general overview of the packaging process is as follows:

image::images/devonfw-deployment/tutorial_devon_jspackaging_process.png[,width="450",link="https://github.com/devonfw/devon-guide/wiki/images/devonfw-deployment/tutorial_devon_jspackaging_process.png"]

== Preparing the client

Firstly (1), both client applications (the Sencha and the Angular one) should contain a _java_ directory with a _pom.xml_ file which executes the build process (the "production" build, creating a single, compressed Javascript file from all the application files) through the command (2) `mvn install`. We must verify that the information about the _groupId_, the _artifactId_ and the _version_ are provided within the _pom.xml_ file where we should find something like
[source,xml]
----
...
<groupId>com.capgemini.devonfw</groupId>
<artifactId>extjs-sample</artifactId>
<version>1.0.0-SNAPSHOT</version>
...
----

So from the client application, in the _java_ directory we launch the command

[source]
----
myClientApp\java>mvn install
----

After that, if the process goes right, the client app should have been "installed" in the local Maven repository of our environment so in the _\conf\.m2\repository\com\capgemini\devonfw\extjs-sample\1.0.0-SNAPSHOT_ directory we should find the _.jar_ file with the client app packaged

image::images/devonfw-deployment/tutorial_devon_jspackaging_process02.png[,width="450",link="https://github.com/devonfw/devon-guide/wiki/images/devonfw-deployment/tutorial_devon_jspackaging_process02.png"]

== Preparing the server
The Java server application contains a _pom.xml_ file (3). In this _pom.xml_ file we should add the dependency to the _.jar_ client that we have just created using the references to the _groupId_, _artifactId_ and _version_ that we have spefified in the client _pom.xml_.

So in the _pom.xml_ file of our server project we should add:
[source,xml]
----
    <dependency>
      <groupId>com.capgemini.devonfw</groupId>
      <artifactId>extjs-sample</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <type>zip</type>
      <classifier>web</classifier>
      <scope>runtime</scope>
    </dependency>
----

And in the plugins of the _pom.xml_ we should add a reference to the package again within the _<overlay>_ tag: 
[source,xml]
----
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <overlays>
            <overlay>
              <groupId>com.capgemini.devonfw</groupId>
              <artifactId>extjs-sample</artifactId>
              <type>zip</type>
              <classifier>web</classifier>
              <targetPath>jsclient</targetPath>
            </overlay>
          </overlays>
        </configuration>
      </plugin>
----

[NOTE]
====
If you are using a Sencha project as client app you must delete all the `<execution>` tags from the `exec-maven-plugin` inside the _jsclient_ profile as this configuration is related to _oasp4js_ projects.
====

Now we have to define a Maven profile so in Eclipse, over the server project we should right-click and select _Maven > Select Maven Profile_. In the subsequent window we should select the _jsclient_ option.

image::images/devonfw-deployment/tutorial_devon_jspackaging_process03.png[,width="450",link="https://github.com/devonfw/devon-guide/wiki/images/devonfw-deployment/tutorial_devon_jspackaging_process03.png"]

Then we have to add some unsecured resources in the method _configure(HttpSecurity http)_ of the _../general/configuration/WebSecurityConfig.java_ class. 

Edit the _unsecureResources_ to have something like that:
[source,java]
----
@Override
  public void configure(HttpSecurity http) throws Exception {

    String[] unsecuredResources =
        new String[] { "/login", "/security/**", "/services/rest/login", "/services/rest/logout", "/jsclient/**", "/websocket/**"};
    
    (...)

}
----

== Packaging the apps
Finally we are going to package both client and server applications into the same _.war_ file. To do that we must execute the `package` Maven command (4) from within the projects root directory (the parent of the server project).

[source]
----
mvn package -P jsclient
----



