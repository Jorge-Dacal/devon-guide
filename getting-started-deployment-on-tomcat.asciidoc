:toc: macro
toc::[]

= Deployment on Tomcat (Client/Server)

=== Deploy standalone server with embedded Tomcat 8
The preferred way is the standalone execution via the spring boot framework within eclipse. In this scenario, the spring boot framework runs the sample application using an embedded tomcat server.

Open eclipse and find class io.oasp.gastronomy.restaurant.SpringBootApp. This class configures the application and contains the main-method to start the sample application.

Select the class and click the left mouse button. In the subsequent open context menu select the entry 'Run as => Java Application' (or 'Debug as ...').

image::images/eclipse-run-as.png[width="813", high="390", align="center"]

The application should start. Additional configuration settings are not necessary.

Once started, the OASP server applications runs on http://localhost:8081 with /oasp4j-sample-server/ as _context-root_. 

* Base url: http://localhost:8081/oasp4j-sample-server[http://localhost:8081/oasp4j-sample-server]
* Service list: http://localhost:8081/oasp4j-sample-server/services[http://localhost:8081/oasp4j-sample-server/services]

The _contex-path_ and/or _server port_ can be changed by setting the corresponding properties in the _application.properties_ file:

[source, java]
server.port=8081
server.context-path=/oasp4j-sample-server
 
It is also possible to start the application without eclipse with the following maven command '..\samples\core\>mvn spring-boot:run', but this is not the preferred way. The command must be executed within the core project, otherwise the maven 'spring boot' plugin is not available.

Important: If you are always and ever working with the embedded Tomcat deployment, you may remove the https://github.com/oasp/oasp4j/blob/develop/samples/core/src/main/java/io/oasp/gastronomy/restaurant/general/configuration/ServletInitializer.java[ServletInitializer] Configuration from your application. This will speed up startup time by a factor of 2.
