:toc: macro
toc::[]

= OASP4JS Coding Conventions

This page contains a description of coding rules, naming conventions and a project structure proposed by the oasp4js. Additionally, some tools which help to maintain code quality are described in the later sections of this page.

== Standard coding conventions
We follow these standard coding conventions in order to improve quality:

* https://google.github.io/styleguide/jsguide.html[Google JavaScript Style Guide]
* http://javascript.crockford.com/code.html[Code Conventions for the JavaScript Programming Language]

== Project specific code conventions
In addition to the standard code conventions which are defined in the previous section, the following oasp4js specific rules should be obeyed:

. Every business module goes to a *separate folder*, e.g. +table-mgmt+
. Every business module should be an *angular module*
. The main js file of a module should be *located directly* under the module's +js+ directory
. The main js file of a module should have a name *compliant with the following convention*: +<module>.module.js+ where the +<module>+ is a placeholder for the module's name
. js files names *are compliant* with the link:Client-GUI-Angular-Application-Template-Structure#js-directory[js file naming convention]
. Every controller should be located in a *separate* js file
. Every service should be located in a *separate* js file

A detailed project structure definition which describes all parts of an application can be found link:Client-GUI-Angular-Application-Template-Structure[here].

== Tests
Every Service and Controller should have a corresponding test file. Currently there is no specific folder for test files so they are located in the same folder as files with the corresponding application logic.
The TDD approach is not required but is highly recommended.

== Documentation
Documentation of the code in oasp4js should be written using the http://usejsdoc.org/[JSDoc] format. Every file in the oasp4js project should contain at least a basic description of the code's functionality. Code documentation should be updated after every change in the code which affects its functionality. A situation when the code documentation is outdated is unacceptable.
