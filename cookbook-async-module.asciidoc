:toc: macro
toc::[]

= The async module

== Introduction

Asynchronous processing in server side and client side is a new feature offered by the JAX-RS 2.0.

In synchronous request/response processing model, client connection is accepted and processed in a single I/O thread by the server. Normally a pool of such I/O threads is available at server side. So when a request is received, the server dedicates one of these threads to accept and process the request. The thread blocks until the processing is finished and returned.

The idea behind asynchronous processing model is to separate connection accepting and request processing operations. Technically speaking it means to allocate two different threads, one to accept the client connection (acceptor) and the other to handle heavy and time consuming operations (worker) releasing the first one.

== The async IP module
The previous concept is implemented in Devonfw through the _async module_ so, including it in your project, you will be able to aply the async process of requests in the REST services of your apps in a few steps, avoiding the complex details of the implementation.

=== Adding the async module dependency to your project
To get access to the functionality of the _async module_ you will need to include its dependency in your project's pom.xml

[source,xml]
----
 <dependency>
    <groupId>com.capgemini.devonfw.modules</groupId>
    <artifactId>devonfw-longwebrequest</artifactId>
    <version>2.1.0-SNAPSHOT</version>
</dependency>
----

=== Injecting the module

Add the reference to the module in your REST service using the `@Inject` annotation

[source,java]
----
import com.capgemini.devonfw.module.longwebrequest.common.api.LongWebRequest;

...

@Service("myRestService")
@Path("/rest")
public class Rest {

  @Inject
  private Async async;

	[...]


----

Remember to add the package of the module to the `@ComponentScan` annotation in the Spring Boot main class.

[source,java]
----
@ComponentScan(basePackages = { "com.capgemini.devonfw.module.longwebrequest" , "my.rest.location.package" }
----


=== Call the module
Before calling the module you will need to complete two previous steps:

- Wrap your long process in the _run_ method of a class that implements the `AsyncTask`.

[source,java]
----
public class MyAsyncTask implements AsyncTask {

  @Override
  public Object run() {

  	// Here your code for long process
  }

}
----

- provide an Async Response, to do so use the `@Suspended` annotation and add the `AsyncResponse` object to your REST method.

Now you can call the module using its _execute_ method. The request will be binded to the async response and the async task provided.

The call will be like the following

[source,java]
----
import com.capgemini.devonfw.module.longwebrequest.common.api.LongWebRequest;
import javax.ws.rs.container.AsyncResponse;
import javax.ws.rs.container.Suspended;
...

@Service("myRestService")
@Path("/rest")
public class Rest {

  @Inject
  private Async async;

  @GET
  @Path("/asynctask")
  @Produces(MediaType.TEXT_PLAIN)
  public void asyncTask(@Suspended final AsyncResponse response) {

    this.async.execute(response, new MyAsyncTask());
  }
----

That's all. With these simple steps you will have an async process implemented. Now let's see some more features of the module.

=== Passing parameters

You also can pass parameters to be used in the long task process.

In this case the module call would be

[source,java]
----
  @GET
  @Path("/asynctask/{id}")
  @Produces(MediaType.TEXT_PLAIN)
  public void asyncTask(@Suspended final AsyncResponse response, @PathParam("id") String id) {

    this.async.execute(response, new MyAsyncTask(id));
  }
----

And the wrapper class

[source,java]
----
public class MyAsyncTask implements AsyncTask {

  private String id;

  public MyAsyncTask(String id) {
    this.id = id;
  }

  @Override
  public Object run() {

  	// Here your code for long process with access to 'this.id'
  }

}
----

=== Module Configuration

Internally the Async module process can be configured in two main parameters:

- *core pool size*: Sets the ThreadPoolExecutor's core pool size.

- *time out*: The amount of time that the process will wait for our long task to be finished before return. A timeout of < 0 will cause an immediate return of the process. A timeout of 0 will wait indefinitely.


The default values provided in the module are:

- core pool size: 10.

- time out:

  * milliseconds: 0.
  * status: 503 , service unavailable (available status 400,403,404,500 and 503).
  * response Content: Operation timeout (the time out response message).
  * mediatype: text/plain (you can response the timeout in json, xml, html, etc. formats).

However you can edit those values by overriding the configuration properties in your app. To do it you can use the `application.properties` to add the properties you want to define.

.application.properties file
|===
| *Property* | *Application Property Name* 
| core pool size | devonfw.async.corePoolSize 
| time out milliseconds | devonfw.async.timeout.milliseconds 
| time out status | devonfw.async.timeout.status 
| time out response content | devonfw.async.timeout.responseContent 
| time out media type | devonfw.async.timeout.mediatype 
|===

As example, the next could be a valid `application.properties` configuration file for an application in which we want an async process with a _core pool size_ of 20, and a _timeout_ of 10 seconds returning with a status of 500 (internal server error) and a response in _json_ format:

[source,java]
----
devonfw.async.corePoolSize=20
devonfw.async.timeout.milliseconds=10000
devonfw.async.timeout.status=500
devonfw.async.timeout.mediatype=application/json
devonfw.async.timeout.responseContent={"response":[{"message":"error", "cause":"time out"}]}
----

