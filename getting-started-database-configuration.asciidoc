:toc: macro
toc::[]

= Database configuration

In this tutorial we are going to configure our application to connect with a real database of our choice. Devonfw give us a very simple configuration, so we just need to add the dependency of the database libraries, create a profile, set the information of our database in the profile and activate it, update the script files, if any, as per DB syntax.
All these steps to be done in generated (through oasp4j-template server archetype), xxx-core project.
By default, it comes with http://www.h2database.com/html/quickstart.html[h2] database configured.If we want to configure another db like MySQL, MS SQL or PostGre SQL, refer below sections.


== Add dependencies
Add Dependency for database in _pom.xml_ file. For e.g If we are configuring mysql databse in our application, then we need to add below dependency.

MySQL:
 
[source,xml]
----
<dependency>
 	<groupId>mysql</groupId>
 	<artifactId>mysql-connector-java</artifactId>
</dependency>
----

image::images/database-configuration/db-config1.png[,width="450",link="images/database-configuration/db-config1.png"]

*Note*: this driver should NOT be used in a production environment because of license issues. See down for an alternative.

== Create a Spring Profile

Spring Profile provides a way to segregate parts of our application configuration and make it only available in certain environments. In our case, we're going to create a profile to our database configuration.

Create a file in `src/main/resources/config` named _application-{PROFILE_NAME}.properties_. The name of the profile isn't important, for this example we named it _application-mysql.properties_.

== Set the database configuration

Add database configuration in _application-{PROFILE_NAME}.properties_ file. For e.g

MySQL:
[source]
----
spring.jpa.database=mysql
spring.datasource.url=jdbc:mysql://localhost:3306/restaurant?user=root&password=root&connectTimeout=10000&socketTimeout=10000&autoReconnect=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
flyway.locations=classpath:db/migration,classpath:db/migration/MySQL
----

image::images/database-configuration/db-config2.png[,width="450",link="images/database-configuration/db-config2.png"]

== Activate the new profile

To activate new profile update `src/main/resources/application.properties` file. Set _spring.profiles.active= profile-name_. In our example profile-name is _mysql_. 
 
MySQL:
[source]
----
spring.profiles.active=mysql 
----

image::images/database-configuration/db-config3.png[,width="450",link="images/database-configuration/db-config3.png"]




== Further Details on Database configurations
=== MySQL

The use of the MySQL is already being illustrated in the above examples. However, as mentioned, the GPL licensed (native) MySQL driver should *not* be used in a production environment. As an alternative, the free and liberally licensed "mariaDB" (a MySQL clone) library should be used. 

The dependency declaration consists of:

[source,xml]
----
<dependency>
    <groupId>org.mariadb.jdbc</groupId>
    <artifactId>mariadb-java-client</artifactId>
    <version>1.2.3</version>
</dependency> 
----

And the library can be used like MySQL but with a slight change to the configuration:

[source]
----
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
----

=== PostgreSQL 

The dependency declaration consists of:

 <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
     <version>9.4-1206-jdbc41</version>
  </dependency>


Ultimately, the following configuration must be used in order to use the postgresql driver and database:
[source]
----
spring.jpa.database=postgresql
spring.datasource.url=jdbc:postgresql://localhost:5432/<db name>
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.username=postgres
spring.datasource.password=<password set at time of installation>
spring.datasource.driver-class-name=org.postgresql.Driver
flyway.locations=classpath:db/migration,classpath:db/migration/postgres
----

=== Microsoft MSSQL Server

The Microsoft JDBC drivers are *not* available on Maven Central; http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=11774[ they need to be downloaded from the Microsoft site.]
 
Once downloaded they should be installed in the local Maven repository (_.m2_ folder on the local machine). That can be done with the command:

[source,batch]
----
mvn install:install-file -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=<version> -Dpackaging=jar -DgeneratePom=true -Dfile=<driver JAR file>
----

Once installed, the library must be added to the project's _pom.xml_ file. The dependency declaration should be something like

[source,xml]
----
 <dependency>
    <groupId>com.microsoft.sqlserver</groupId>
    <artifactId>sqljdbc4</artifactId>
    <version>4.0</version>
  </dependency>
----

Ultimately, the following configuration must be used in order to use the MSSQL server driver and database:

[source]
spring.jpa.database=sqlserver
spring.datasource.url=jdbc:sqlserver://<servername>:<port>;databaseName=<databasename>
spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver


(replace _root_ with your actual username / password)

For further information see: https://wiki.jasig.org/pages/viewpage.action?pageId=57578731[MS SQL Server and MS JDBC Driver ]
