:toc: macro
toc::[]

= Business module layout

The example structure of a business module with the js / html / img / css / i18n files is presented below:

[source]
----
    └── business-module
        ├── css
        │   └── additional-sheet.less
        │   └── business-module.less
        ├── html
        │   ├── cached
        │   │   └── dialog1.html
        │   └── dialog2.html
        ├── img
        │   ├── sprite
        │   │   └── icon1.png
        │   ├── img.jpg
        │   └── img2.png
        ├── js
        │   └──business-module.module.js
        │   └──business-module.module.spec.js
        └── i18n
            └─locale-en.json
----

The first step of adding a new business module is creating a module directory under the app directory. In the described example the business module is named "business-module".

The second step is to add the module's name to a modules array in the +config.json+ file (it is expected that the future release will contain an automated solution for extending the modules array so it won't be necessary to extend it manually):

[source,javascript]
----
"modules": [
      "main",
       // some other modules
      "business-module"
     ]
----

In the next step the business-module substructure should be created: directories for java script, html, less, images and internationalization files.


== js Files
A business module should contain at least one, mandatory file named according to the following convention:

+<module>/js/<module>.module.js+

with a definition of an angular module. An example of the +business-module.module.js+ file's content is listed below:

[source,javascript]
----
angular.module('app.business-module', ['app.main', 'app.businessModule.templates'], function ($routeProvider, oaspTranslationProvider) {
    'use strict';
    oaspTranslationProvider.enableTranslationForModule('business-module');
    $routeProvider.when('/business-module/dialog2', {
        templateUrl: 'business-module/html/dialog2.html'
    }).when('/business-module/dialog1', {
        templateUrl: 'business-module/html/dialog1.html'
    });
});
----

The first line contains:

. module definition - the name convention is +app.<module-name>+

. dependencies - to the +app.main+ module and to the +app.businessModule.templates+. The +app.businessModule.templates+ is created automatically according to the following naming convention: +app.<moduleName>.templates+. The dependency to this module is necessary if we want to use cached html templates - for details please see link:Client-GUI-Angular-Adding-Business-Module#html-files[HTML Files] below.

. injections of the +$routeProvider+ and +oaspTranslationProvider+ services. The services are used below to:

.. load an appropriate dialog when the specified path is given

.. enable internationalization - for details please see the link:Client-GUI-Angular-adding-business-module#i18n-files[i18n section]

It is very important to add a dependency to the created angular module in the main app module definition, in the +app.module.js+ file. Eventually the first line of the file should look like this:

[source,javascript]
----
angular.module('app', ['ui.select', 'ngRoute', 'app.main', 'app.business-module' /*other modules*/]);
----

== js tests files

It is recommended to develop modules according to the best coding practices and to keep high test coverage of the javascript code. For each js file which needs tests the corresponding file with the "spec" suffix should be created. The naming convention of a js test file is:

+<file-name>.<angular-item>.spec.js+

For example, the test file for the +business-module.module.js+ file should be named +business-module.module.spec.js+.

Please check the link:Client-GUI-Angular-Gulp-Tasks#tests[gulp test tasks description] to see how to run js tests.

+oasp4js+ uses http://jasmine.github.io/[Jasmine] for js tests.

== html files

The html files should be placed under the +html+ directory. When the html template is placed directly under the +html+ directory, then it is retrieved from the server every time when a request for the template is sent. If the template should be cached on the client side, then it should be placed in the +cached+ directory placed directly under the +html+ directory. The implemented mechanism will automatically put the template in the +$templateCache+ service. Cached templates can be obtained without an additional request to the server.

The build process allows to include templates in other templates. In order to include the +dialog2.html+ template in the +dialog1.html+ template the following line should be added to the +dialog1.html+ file (the line should be added in the same place where the content of the +dialog2.html+ file should be added):

[source,html]
----
<!-- process:include business-module/html/dialog2.html --><!-- /process -->
----

== css Stylesheets

To add custom stylesheets to a business module, simply create a file named according to the following convention:

+<module>/css/<module>.less+.

In our example the file is named business-module.less and it is placed under the +css+ directory. This file will be automatically compiled into css and attached to a common css file served to a client. Variables and mixins defined in other modules are visible and can be reused, but generic and common code should be generally placed in the main module. To make the "less" code easily readable and understandable for others, it is recommended to spread large "less" files into smaller parts and use include mechanism to connect them to the +<module>/css/<module>.less+ file.
In this example the additional-sheet.less file is imported in the business-module.less file with the following instruction:

[source,css]
----
@import "business-module/css/additional-sheet.less";
----

== img Files

Image files for the business module can be provided in two ways:

. by placing them directly under the +img+ directory
. by placing them under the +img/sprite+ directory (files must be in the PNG format)

The first solution should be used only for large files which will be later included in the html code with the +<img>+ tag.

The second solution should be used for small icons, assets and other graphical parts of layout. The build system contains a mechanism for merging images into a single mesh for optimization purposes. For "Sprite" images a single image file (sprite.png) and a corresponding stylesheet (sprite.css) will be generated. It is important to note that both sprite.png and sprite.css files are common to all modules, including the main module.

== i18n Files

+oasp4js+ has a built-in support for internationalization. In order to provide i18n for the business module, the +oaspTranslationProvider+ (located in the module `oasp.oaspI18n`) should be injected in the main js file of a business module.
Besides that the following methods should be called:

* +oaspTranslationProvider.enableTranslationForModule(''module-name'');+
* +oaspTranslationProvider.setSupportedLanguages+

Just like in the example:

[source,javascript]
----
oaspTranslationProvider.enableTranslationForModule('main');
oaspTranslationProvider.setSupportedLanguages(
    [
        {
            key: 'en',
            label: 'English',
            'default': true
        }
    ]
);
----

The second step is to add translation files which should be placed under the +i18n+ directory. The naming convention for the translation files is:

+locale-<country-code>.json+

Our example business module has one i18n file: +locale-en.json+. Its content is shown below:

[source,javascript]
----
{
    "BUSINESS_MODULE": {
        "SOME_TRANSLATION_KEY_1": "English text 1",
        "SOME_TRANSLATION_KEY_2": "English text 2"
    }
}
----

In order to use an internationalized label in an html file the +translate+ directive should be used and the key for a translated text should be given in the html tag. For example when there is a need to put an internationalized paragraph in the dialog, the following html code should be used:

[source,html]
----
<p translate>BUSINESS_MODULE.SOME_TRANSLATION_KEY_1</p>
----

The list of supported languages is defined in the +main.module.js+ file (please look for the +oaspTranslationProvider.setSupportedLanguages+ method call).
