:toc: macro
toc::[]

# Introduction

The Devon Console, Devcon, is a cross-platform command line tool running on the JVM that provides many automated tasks around the full life-cycle of Devon applications, from installing the basic working environment and generating a new project, to running a test server and deploying an application to production.

Devcon is the easiest way to use Devon. With a focus on project automation, easy command execution and declarative configuration, it gets out of your way and lets you focus on your code.

# Devcon structure

Devcon is based on three basic elements:

- modules

- commands

- parameters

So Devcon is a tool based on modules where each module groups several commands related to the module functionality and each command may need parameters to work in one way or another. 
Each command is used to accomplish one task and may need some parameters in order to achieve its goal. These parameters can be mandatory or optional. The mandatory parameters must be provided by the user when launching the command and the optional parameters can be provided by the user in the same way but if not, they can be read from a configuration file. Apart from this we can use global parameters that are independent from the modules and commands and that will be helpful in order to obtain devcon information (like help) or other basic configuration features, these parameters will be explained later.

# Devcon basic usage

Accordingly with the defined structure the devcon usage is based on the definition of each of its element: module, command and parameters. So in the command line we must specify each of these elements in the correct order:

[source,batch]
----
devon [module] [command] [parameters ...]
----

- the module will be the first word after the “devon” keyword.

- the command will be the second word after the “devon” keyword.

- the parameters are the rest of the elements defined after the command.

=Defining the module and the command

Both module and command are defined by an identifier that is the ‘name’ that the module or command have assigned in devcon.

= Defining the parameters

The parameter definition is divided in two parts. The first one is the parameters identifier that is the _name_ that the parameter has assigned within the devcon app *preceded by a single dash*. The second part of the parameter definition is the parameter value.

= Basic example

Thus a basic example of a devcon line command would be

[source,bash]
----
C:\>devon foo saySomething -message hello
----

where: 

- *foo* is the module.

- *saySomething* is the command of the _foo_ module to be executed.

- '*-message*' is the parameter that the command _saySomething_ needs to be executed.

- *hello* is the value for the _message_ parameter.

= Parameters

As we mentioned before from the point of view of the commands we have two types of parameters: the mandatory parameters and the optional parameters. 
The mandatory parameters must be provided by the user specifying the parameter identifier and the value in the command line. The optional parameters must be also provided to the app but, if the user do not specify it, devcon will try to find the parameter value in a related configuration file. In case the parameter is not defined either the command line or in the configuration file devcon will prompt the user for the parameter value.

== Optional parameters in devon.json file

In the case of the optional parameters if we don’t specify the value when launching the command devcon will search for a _devon.json_ file in order to find the value of the optional parameter. Devcon will start searching from the directory from which the command has been launched and will climb the directory tree until the config file is found.
The _devon.json_ file is a configuration file that defines some properties to be used by devcon in some processes. To define the value for optional parameters we can use the _optionalParameters_ property, that is a JSON object with the definition of each optional parameter

[source,json]
----
…
"optionalParameters": {"optional1":"value1", "optional2":"value2", … }
…
----

Returning to the previous example imagine that now the _saySomething_ command of the _foo_ module has two parameters, the _'message'_ that is mandatory and the _'signature'_ that is optional. We also have a configuration file called _devon.json_ in the test directory with a content like

[source,json]
----
{ "version": "2.0.0",
  "type":"oasp4j",
  "optionalParameters": {"signature":"test"}
}
----
	
Now if we launch the command from _MyProject\test_ directory providing both _message_ and _signature_ parameters

[source,batch]
----
c:\MyProject\test>devon foo saySomething -message hello -signature John 
----

The command will use the parameter *-message* with value '_hello_' and the parameter *-signature* with value _'John'_ and the output will be

[source,batch]
----
hello
John
----

But if don’t provide the _signature_ parameter

[source,batch]
---- 
c:\MyProject\test>devon foo saySomething -message hello
----

devcon will try to find a _devon.json_ file and within this file will search for the _"optionalParameters"_ object to get the value for _signature_ parameter. 
In our case the file will be found (in the same directory, remember that if the file is not found in the first directory devcon would climb to the _MyProject_ directory to search there the configuration file) and the output will be 

[source,batch]
----
hello
test
----

Finally if the signature parameter is not defined in the _devon.json_ file or the devon.json is not found devcon will prompt the user to get the value for the parameter

[source,batch]
----
c:\MyProject\test>devon foo saySomething -message hello
Please introduce the value for missing parameter signature:|
----

Global parameters
Devcon handles a third type of parameter that has nothing to do with command parameters. We are referring to the global parameters.
The global parameters are a set of parameters that works in global context, which means that will affect the behaviour of the command in the first phase, before launching the command module itself. 
In the first devcon version we have three global parameters defined:
global parameter help: defined with -h or --help.
global parameter no prompt: defined with -np or --noprompt.
global parameter version: defined with -v or --version.

Help
The global parameter help is very useful to show overall help info of devcon or also for showing more detailed info of each module and command supported.
For example if we know nothing about how to start with devcon the option -h (or --help) will show a summary of the devcon usage, listing the global parameters and the available modules alongside a brief description of each one.  
C:\>devon -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...]
Devcon is a command line tool that provides many automated tasks around
the full life-cycle of Devon applications.
 -h,--help        show help info for each module/command
 -np,--noprompt   the process will not ask for user input
 -v,--version     show devcon version
List of available modules:
> help: This module shows help info about devcon
> sencha: Sencha related commands
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> github: Module to create a new workspace with all default configuration
> workspace: Module to create a new workspace with all default configuration

As a global parameter if we use the -h parameter with a module it will show the help info related to this module including a basic usage of the devcon module and a list of the available commands in this module
C:\>devon foo -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: foo <<command>> [parameters...]
This is only a test module.

Available commands for module: foo
> saySomething: This command is for say something

In the same way, as a global parameter, if we use the -h parameter with a command instead of launching the command the help info related to the command will be shown
D:\>devon foo saySomething -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: saySomething [-message] [-signature]
This command is to say something
 -message     the message to be written
 -signature   the signature

Even if we specify the needed parameters the behaviour will be the same because, as we said, the global parameters affect how devcon behaves before launching the commands
D:\>devon foo saySomething -message hello -signature John -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: saySomething [-message] [-signature]
This command is to say something
 -message     the message to be written
 -signature   the signature

No prompt
The no prompt parameter, defined with -np (or --noprompt) is a parameter to avoid the app asking for user input. As we saw in previous sections there are times where devcon can prompt the user to complete some information as needed parameters. With the -np parameter we avoid this situation and the app will not ask for any extra information during the process. This option can be useful in cases where we want to automate some tasks avoiding the process to hang on waiting for an input. 
Be careful with that option as it can result in execution errors. Imagine that in the previous example we don’t have defined the optional parameter signature in the devcon.json file and we execute the command without this parameter and using the -np option. The app will require the signature parameter and, as it can not ask for it, this will result in an error.

D:\MyProject\client>devon foo saySomething -message hello -np
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[ERROR] An error occurred. Message: You need to specify the following parameter/s: [-signature]

D:\MyProject\client>

Version
This is a simple option that returns the devcon running version and is defined with -v (or --version). As the help option this will show the devcon version even though we have defined a command with all required parameters.

D:\>devon -v
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
devcon v.0.1.0

D:\>devon foo saySomething -message hello -signature John -v
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
devcon v.0.1.0

First steps with devcon
In this section we are going to show the basic steps to start using devcon from scratch. To do that we can use the global option -h (help) in order to figure out which commands and parameters we need to define but in a very first attempt only the command devon will be enough.
So the first step will be look for a module that fits our requirements. We can do so with the help option (defined as -h or --help) or, as we mentioned before, with a simple command devon. If we do not specify any information we will see a summary of the general help information, a example of usage and a list with global parameters and the available modules.

D:\>devon
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...]
Devcon is a command line tool that provides many automated tasks around
the full life-cycle of Devon applications.
 -h,--help        show help info for each module/command
 -np,--noprompt   the process will not ask for user input
 -v,--version     show devcon version
List of available modules:
> help: This module shows help info about devcon
> sencha: Sencha related commands
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> github: Module to create a new workspace with all default configuration
> workspace: Module to create a new workspace with all default configuration

Once we have the list of modules and an example of how to use them we may need to get a devon distribution so we need to go deeper in module dist, to do so we can use the help option after the module definition

D:\>devon dist -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: dist <<command>> [parameters...]
Module with general tasks related to the distribution itself

Available commands for module: dist
> install: This command downloads the distribution
> s2: Initializes a Devon distribution for use with Shared Services.

Now we know that the dist module has two commands, the install command and the s2 command. In case we had to get a devon distribution we can learn how to use the install command using again the help option over it

D:\>devon dist install -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: install [-password] [-path] [-type] [-user]
This command downloads the distribution
 -password   the password related to the user with permissions to download
             the Devon distribution
 -path       a location for the Devon distribution download
 -type       the type of the distribution, the options are:
             'oaspide' to download OASP IDE
             'devondist' to download Devon IP IDE
 -user       a user with permissions to download the Devon distribution

 So now we know that the install command of the dist module needs:
user with permissions
the related password
the path to save the downloaded file
the type of distribution that can be ‘oaspide’ or ‘devondist’.

With all that information we can launch a fully functional command like the following

D:\>devon dist install -user john -password 1234 -path D:\Temp\MyDistribution -type devondist

Regarding the order of the command parameters, devcon will order them internally so we don’t have to concern about that point and we can specify them in the order we want, the only requirement is that all mandatory parameters are provided.


Modules
In the introduction of this guide we mentioned that Devcon is a tool based on modules that group commands so the different functionalities are stored in these modules that act as utilities containers.
The first version of devcon has been released with the following modules
help
sencha
dist
doc
github
workspace

but in your current Devcon version more modules may have been included. You can list them using the option devon -h 

Dist
The dist module is responsible for the tasks related with the distribution which means all the functionalities surrounding the configuration of the Devon distribution, including the obtention of the distribution itself.
The module dist consists of two parameters: install and s2.
dist install
The install command downloads a distribution from a Team Forge repository and after that extracts the file in a location defined by the user.

Requirements
A user with permissions to download files from Team Forge repository.

Parameters
The install parameter needs four parameters to work properly:
user: a Team Forge user with permissions to download files from the repository at least.
password: the Team Forge user password.
path: the path where the distribution must be downloaded.
type: the type of distribution. The options are ‘oaspide’ to download a oasp4j based distribution or devondist to download a Devon based distribution.

Example of usage
A simple example of usage for this command would be the following

D:\>devon dist install -user john -password 1234 -path D:\Temp\MyDistribution -type devondist
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[INFO] installing distribution...
[INFO] Downloading Devon-dist_2.0.0.7z (876,16MB). It may take a few minutes.
[==========] 100% downloaded
[INFO] File downloaded successfully.
[...]
[INFO] extracting file...
[INFO] File successfully extracted.
[INFO] The command INSTALL has finished successfully

You must have in mind that this process can take a while, specially depending of the connection to the internet.

dist s2
The s2 command has been developed to automate the configuration process to use Devon as a Shared Service. This configuration is based on launching two scripts included in the Devon distributions, the s2-init.bat and the s2-create.bat.
The s2-init.bat is responsible for configuring the settings.xml file (located in the conf/.m2 directory). Basically enables the connection of maven with the Artifactory repository, where the Devon IP modules are stored, and adds the user credentials for this connection.

The s2-create.bat creates a new project in the workspace of the distribution, and does a checkout of a Subversion repository inside this new project. Finally the script creates a Eclipse .bat starter related to the new project.

Requirements
An Artifactory user with permissions to download files from the repository.
A Subversion user with permissions to do the checkout of the project specified in the url parameter.

The command can be launched from any directory within a Devon distribution. The Devon distribution is defined by having a settings.json file located in the conf directory. This file is a JSON object that defines parameters like the version of the distribution or the type which should be devon-dist as is showed below.

{"version": "2.0.0","type": "devon-dist"}

The command will search for this file to get the root directory where the scripts are located so is necessary to have this file in its correct location.

Apart from this the settings.xml file needs to be compatible with the Shared Services autoconfiguration script (s2-init.bat). 
Parameters
So the s2 command needs six parameters to be able to complete the two phases:
artuser: an Artifactory user with permissions to download files at least.
artencpass: the encrypted password of the Artifactory user (can be obtained from the Artifactory user profile).
projectname: the name for the new project.
svnuser: a user with permissions in the Subversion repository.
svnpass: the password of the Subversion user.
svnurl: the url of the project in the Subversion repository 

Example of usage
A simple example of usage for this command would be the following

D:\devon-alpha\workspaces>devon dist s2 -projectname TestProject -artuser john -artencpass ZMF4AgyhQ5X6Sr9Bd1ohjWcFjL -svnurl https://coconet...Project/ -svnuser john_svn -svnpass 12345
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[...]
[INFO] The checkout has been done successfully.
[INFO] Creating and updating workspace...
[...]
INFO: Completed
Eclipse preferences for workspace: "TestProject" have been created/updated
Created eclipse-TestProject.bat
Finished creating/updating workspace: "TestProject"

After this a new TestProject directory must have been created in the workspaces directory and in the distribution root a new eclipse-testproject.bat script must have been created.


Doc
With this module we can access in a straightforward way to the documentation to get started with Devon framework. The commands of this module show information related with different components of Devon even opening in the default browser the sites related with them.
doc devon : Opens the Devon site in the default web browser.
doc devonguide : Opens the Devon Guide in the default web browser.
doc getstarted : Opens the ‘Getting started’ guide of Devon framework.
doc links : Shows a brief description of Devon framework and lists a set of links related to it like the public site, introduction videos, the Yammer group and so forth.
doc oasp4jguide : Opens the OASP4J guide.
doc sencha : Opens the Sencha Ext JS 6 documentation site.  

Github
This module is implemented to facilitate getting the Github code from OASP4J and Devon repositories. It has only two commands, one to get the OAPS4J code and the second to get the Devon code.

github oasp4j
This command clones the oasp4j repository to the path that the user specifies in the parameters.

Parameters
The oasp4j command needs only one parameter:
path: the location where the repository should be cloned.
Example of usage
A simple example of usage for this command would be the following

D:\>devon github oasp4j -path C:\Projects\oasp4j

github devoncode
This command clones the Devon repository to the path specified in the path parameter.

Requirements
A github user with download permissions over the Devon repository.

Parameters
path: the location where the repository must be cloned.
username: the github user (with permission to download).
password: the password of the github user

Example of usage
A simple example of usage for this command would be the following

D:\>devon github devoncode -path C:\Projects\devon -user John_g -pass 12345

Help
The help module is responsible for showing the help info to facilitate the user the knowledge to use the tool. It has only one command, the guide command, that doesn’t need any parameter and that basically prints a summary of the devcon general usage with a list of the global options and a list with the available modules

Example of usage
D:\>devon help guide
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...]
Devcon is a command line tool that provides many automated tasks around
the full life-cycle of Devon applications.
 -h,--help        show help info for each module/command
 -np,--noprompt   the process will not ask for user input
 -v,--version     show devcon version
List of available modules:
> help: This module shows help info about devcon
> sencha: Sencha related commands
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> github: Module to create a new workspace with all default configuration
> workspace: Module to create a new workspace with all default configuration

If you have follow this guide you can realize that the result is the same that is shown with other options as devon or devon -h. This is because these options internally are using this module help.
Sencha
Sencha is a pure JavaScript application framework for building interactive cross platform web applications and is the view layer for web applications developed with Devon Framework. This module encapsulates the Sencha Cmd functionality that is a command line tool to automate tasks around Sencha apps.

sencha run
This command compiles in DEBUG mode and then runs the internal Sencha web server. Is the equivalent to the Sencha Cmd’s ‘sencha app watch’ and does not need any parameter.

Requirements
We should launch the command from a Devon4Sencha project which is defined by a devon.json file with parameter ‘type’ setted to ‘Devon4Sencha’

{ "version": "2.0.0",
  "type":"Devon4Secha"}

Example of usage
A simple example of usage for this command would be the following

D:\devon-dist\workspaces\senchaProject>devon sencha run


Workspace
This module handles all tasks related to distribution workspaces.

workspace create
This command automates the creation of new workspaces within the distribution with the default configuration including a new Eclipse .bat starter related to the new project.

Parameters
The create command needs two parameters:
devonpath: the path where the devon distribution is located.
foldername: the name for the new workspace.


Example of usage
A simple example of usage for this command would be the following

D:\>devon workspace create -devonpath C:\MyFolder\devon-dist -foldername newproject
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
[INFO] creating workspace at path D:\devon2-alpha\workspaces\newproject
[...]
 
As a result of that a new folder newproject with the default project configuration should be created in the C:\MyFolder\devon-dist\workspaces directory alongside a eclipse-newproject.bat starter script in the root of the distribution. 
