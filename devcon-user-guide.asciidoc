:toc: macro
toc::[]

= Devcon User Guide

image::images/devconlogo_full.png[,align="center",width="200",Devcon, link="https://github.com/devonfw/devon-guide/wiki/images/devconlogo_full.png"]

The Devon Console, *Devcon*, is a cross-platform command line tool running on the JVM that provides many automated tasks around the full life-cycle of Devon applications, from installing the basic working environment and generating a new project, to running a test server and deploying an application to production.

Devcon is the easiest way to use Devonfw. With a focus on project automation, easy command execution and declarative configuration, it gets out of your way and lets you focus on your code.

== Requirements

You will need to have a Java JDK 1.7 or 1.8 installed on your system. It is *not* necessary to use the Devonfw Distribution as Devcon can be used independently from that environment. You might even want to use Devcon itself to download & extract the Devon Distribution zip file to and on your system! (see down...) 

== Getting started: download Devcon

To get started with Devcon you will need to http://devonfw.github.io/download/devcon/devcon.jar[*download the Devoncon jar from the devonfw repository*]. After downloading, enter a console/commandline (on Windows: CMD or Powershell), navigate ("cd") to the folder where you´ve downloaded the jar file and execute the following command:

[source,bash]
----
java -jar decvon.jar system install 
----

This will install the devcon binaries to a folder _'.devcon'_ in your _'%HOME%'_ directory. Devcon is now added to the _'%PATH%'_ environment variable on you system, allowing to execute it directly from the console. However, after installation on Windows you´ll need to close the console and open it again in order for this to work (only the first time, of course).

After installation, you have two commands available. Try either one, or both of

[source,bash]
----
devon  doc userguide
devcon doc userguide
----

to open up the Devcon user guide in your default system web browser. The commands 'devon' and 'devcon' can be used interchangeably. 

== Devcon structure

Devcon is based on three basic elements:

- modules

- commands

- parameters

So Devcon is a tool based on modules where each module groups several commands related to the module functionality and each command may need parameters to work in one way or another. 
Each command is used to accomplish one task and may need some parameters in order to achieve its goal. These parameters can be mandatory or optional. The mandatory parameters must be provided by the user when launching the command and the optional parameters can be provided by the user in the same way but if not, they can be read from a configuration file. Apart from this we can use global parameters that are independent from the modules and commands and that will be helpful in order to obtain devcon information (like help) or other basic configuration features, these parameters will be explained later.

== Devcon basic usage

Now, there are two ways to run Devcon:
a. Using Devcon GUI
b. Using command prompt

=== Usage of Devcon GUI:

To run Devcon using Devcon GUI , we need to run below command from command prompt:

[source,batch]
----
devon -g
----

If we navigate to particular module it will show all commands available in respective module. Exit option is available in first menu.
 
=== Usage of command prompt:

Accordingly with the defined structure the devcon usage is based on the definition of each of its element: module, command and parameters. So in the command line we must specify each of these elements in the correct order:

[source,batch]
----
devon [module] [command] [parameters ...]
----

- the module will be the first word after the "devon" keyword.

- the command will be the second word after the "devon" keyword.

- the parameters are the rest of the elements defined after the command.

==== Defining the module and the command

Both module and command are defined by an identifier that is the 'name' that the module or command have assigned in devcon.

==== Defining the parameters

The parameter definition is divided in two parts. The first one is the parameters identifier that is the _name_ that the parameter has assigned within the devcon app *preceded by a single dash*. The second part of the parameter definition is the parameter value.

==== Basic example

Thus a basic example of a devcon line command would be

[source,bash]
----
C:\>devon foo saySomething -message hello
----

where: 

- *foo* is the module.

- *saySomething* is the command of the _foo_ module to be executed.

- '*-message*' is the parameter that the command _saySomething_ needs to be executed.

- *hello* is the value for the _message_ parameter.

==== Parameters

As we mentioned before from the point of view of the commands we have two types of parameters: the mandatory parameters and the optional parameters. 
The mandatory parameters must be provided by the user specifying the parameter identifier and the value in the command line. The optional parameters must be also provided to the app but, if the user do not specify it, devcon will use a default value for them.

//////////////////////////////////////////
===== Optional parameters in _devon.json_ file

In the case of the optional parameters if we don't specify the value when launching the command devcon will search for a _devon.json_ file in order to find the value of the optional parameter. Devcon will start searching from the directory from which the command has been launched and will climb the directory tree until the config file is found.
The _devon.json_ file is a configuration file that defines some properties to be used by devcon in some processes. To define the value for optional parameters we can use the _optionalParameters_ property, that is a JSON object with the definition of each optional parameter

[source,json]
----
…
"optionalParameters": {"optional1":"value1", "optional2":"value2", … }
…
----

Returning to the previous example imagine that now the _saySomething_ command of the _foo_ module has two parameters, the _'message'_ that is mandatory and the _'signature'_ that is optional. We also have a configuration file called _devon.json_ in the test directory with a content like

[source,json]
----
{ "version": "2.0.0",
  "type":"oasp4j",
  "optionalParameters": {"signature":"test"}
}
----
	
Now if we launch the command from _MyProject\test_ directory providing both _message_ and _signature_ parameters

[source,batch]
----
c:\MyProject\test>devon foo saySomething -message hello -signature John 
----

The command will use the parameter *-message* with value '_hello_' and the parameter *-signature* with value _'John'_ and the output will be

[source,batch]
----
hello
John
----

But if don't provide the _signature_ parameter

[source,batch]
---- 
c:\MyProject\test>devon foo saySomething -message hello
----

devcon will try to find a _devon.json_ file and within this file will search for the _"optionalParameters"_ object to get the value for _signature_ parameter. 
In our case the file will be found (in the same directory, remember that if the file is not found in the first directory devcon would climb to the _MyProject_ directory to search there the configuration file) and the output will be 

[source,batch]
----
hello
test
----

Finally if the signature parameter is not defined in the _devon.json_ file or the devon.json is not found devcon will prompt the user to get the value for the parameter

[source,batch]
----
c:\MyProject\test>devon foo saySomething -message hello
Please introduce the value for missing parameter signature:|
----
//////////////////////////////////////////

==== Global parameters

Devcon handles a third type of parameter that has nothing to do with command parameters. We are referring to the global parameters.

The global parameters are a set of parameters that works in global context, which means that will affect the behaviour of the command in the first phase, before launching the command module itself.

As these parameters act in a global context we do not need to provide a value for them. They work as _flags_ to define some internal behaviour of devcon.

In the first devcon version we have three global parameters defined:

- global parameter _help_: defined with *-h* or *--help*.
- global parameter _version_: defined with *-v* or *--version*.
- global parameter _prompt_: defined with *-p* or *--prompt*.


===== _help_ parameter
The global parameter _help_ is very useful to show overall help info of devcon or also for showing more detailed info of each module and command supported.
For example if we know nothing about how to start with devcon the option *-h* (or *--help*) will show a summary of the devcon usage, listing the global parameters and the available modules alongside a brief description of each one.  

[source,batch]
----
C:\>devon -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...]
Devcon is a command line tool that provides many automated tasks around
the full life-cycle of Devon applications.
 -h,--help        show help info for each module/command
 -v,--version     show devcon version
List of available modules:
> help: This module shows help info about devcon
> sencha: Sencha related commands
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> github: Module to create a new workspace with all default configuration
> workspace: Module to create a new workspace with all default configuration
----

As a global parameter if we use the *-h* parameter with a module it will show the help info related to this module including a basic usage and a list of the available commands in this module

[source,batch]
----
C:\>devon foo -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: foo <<command>> [parameters...]
This is only a test module.

Available commands for module: foo
> saySomething: This command is for say something
----

In the same way, as a global parameter, if we use the *-h* parameter with a command, instead of launching the command the help info related to the command will be shown

[source,batch]
----
D:\>devon foo saySomething -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: saySomething [-message] [-signature]
This command is to say something
 -message     the message to be written
 -signature   the signature
----

Even if we specify the needed parameters the behaviour will be the same because, as we said, the global parameters affect how devcon behaves before launching the commands

[source,batch]
----
D:\>devon foo saySomething -message hello -signature John -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: saySomething [-message] [-signature]
This command is to say something
 -message     the message to be written
 -signature   the signature
----

===== _version_ parameter

This is a simple option that returns the devcon running version and is defined with *-v* (or *--version*). As the _help_ option this will show the devcon version even though we have defined a command with all required parameters.

[source,batch]
----
D:\>devon -v
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
devcon v.1.0.0
----

[source,batch]
----
D:\>devon foo saySomething -message hello -signature John -v
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
devcon v.1.0.0
----

===== _prompt_ parameter

With this global parameter we can ask devcon to prompt for all parameters (both optional and mandatory) when launching a command.

To give an example we can use the _oasp4j create_ command (that creates a new server project based on _OASP4J_ model). In this case we would need to provide several parameters so the command call would look like
[source,batch]
----
D:\devon-dist>devon oasp4j create -servername myServer -groupid com.capgemini -packagename com.capgemini.myServer -version 1.0
----

As you can see the command is defined by `devon oasp4j create` words and the rest of the command line attributes are parameters.

With the global parameter *-p* Devcon gives the user the option to avoid defining any parameter when launching the command and provide step by step all parameters after that, so the usage of some commands can be way easier.

Going back to the previous example if we use the *-p* parameter we get
[source,batch]
----
D:\devon-dist>devon oasp4j create -p
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
Command: devon oasp4j create
Description: This command is used to create new server project

Parameter: serverpath - where to create
->
Parameter: servername - Name of project
-> myServer
Parameter: packagename - package name in server project
-> com.capgemini.myServer_

[...]
----  

As you can see with the *-p* parameter Devcon asks for each parameter related to a command (the optional ones can be left blank as the _serverpath_ in the example) and the user can provide them one on one, getting rid of the concern of knowing what parameters needs a command.

== First steps with devcon

In this section we are going to show the basic steps to start using devcon from scratch. To do that we can use the global option _-h_ (help) in order to figure out which commands and parameters we need to define but in a very first approach only the command _devon_ will be enough.
So the first step will be look for a module that fits our requirements. As we just mentioned we can do so with the _help_ option (defined as _-h_ or _--help_) or, as we also mentioned before, with a simple command _devon_. If we do not specify any information we will see a summary of the general help information, a example of usage and a list with global parameters and the available modules.

[source, batch]
----
D:\>devon
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: devon <<module>> <<command>> [parameters...]
Devcon is a command line tool that provides many automated tasks around
the full life-cycle of Devon applications.
 -h,--help        show help info for each module/command
 -v,--version     show devcon version
List of available modules:
> help: This module shows help info about devcon
> sencha: Sencha related commands
> dist: Module with general tasks related to the distribution itself
> doc: Module with tasks related with obtaining specific documentation
> github: Module to create a new workspace with all default configuration
> workspace: Module to create a new workspace with all default configuration
----

Once we have the list of modules and an example of how to use them we may need to get a devon distribution so we need to go deeper in module _*dist*_, to do so we can use again the _help_ option after the module definition

[source,batch]
----
D:\>devon dist -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: dist <<command>> [parameters...]
Module with general tasks related to the distribution itself

Available commands for module: dist
> install: This command downloads the distribution
> s2: Initializes a Devon distribution for use with Shared Services.
----

Now we know that the _dist_ module has two commands, the _install_ command and the _s2_ command and we can see a brief description of each one so we can decide which one we need to use. In case we had to get a devon distribution we can learn how to use the install command using again the _help_ option over it

[source,batch]
----
D:\>devon dist install -h
Hello, this is Devcon!
Copyright (c) 2016 Capgemini
usage: install [-password] [-path] [-type] [-user]
This command downloads the distribution
 -password   the password related to the user with permissions to download
             the Devon distribution
 -path       a location for the Devon distribution download
 -type       the type of the distribution, the options are:
             'oaspide' to download OASP IDE
             'devondist' to download Devon IP IDE
 -user       a user with permissions to download the Devon distribution
----

So now we know that the _install_ command of the _dist_ module needs:

- user with permissions to download the distribution.

- the related password.

- the path where the distribution file must to be downloaded.

- the type of distribution that can be _'oaspide'_ or _'devondist'_.

With all that information we can launch a fully functional command like the following

[source,batch]
----
D:\>devon dist install -user john -password 1234 -path D:\Temp\MyDistribution -type devondist
----

Regarding the order of the command parameters, devcon will order them internally so we don't have to concern about that point and we can specify them in the order we want, the only requirement is that all mandatory parameters are provided.

==  Devon Command Reference

For a full reference of all available commands in Devcon, see the link:devcon-command-reference[Devcon Command Reference]