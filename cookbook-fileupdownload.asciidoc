:toc: macro
toc::[]

Apache CXF is an open source services framework. CXF helps you build and develop services using frontend programming APIs, like JAX-WS and JAX-RS. 

= File download from org.apache.cxf
*org.apache.cxf* provides option to download files of different MIME (Multipurpose Internet Mail Extensions) types.

*Example:*

In JAX-RS, annotate the service method with @Produces("application/octet-stream"). We define a regular interface of the service and annotate it with JAX-RS annotations:

[source,java]
--------
@SuppressWarnings("javadoc")
@Produces("application/octet-stream")
@GET
@Path("/downloadFile")
public Response getDownloadableFile() throws SQLException, IOException;
--------

And here is a simple implementation of the service:

[source,java]
--------
@Override
public Response  getDownloadableFile() throws SQLException, IOException {
    // FILE_PATH - specifies the path on which file is present.
    File file = new File("FILE_PATH"); 
    ResponseBuilder response = Response.ok((Object) file);
    // FILENAME.FILE_EXTENSION - specifies the filename and its extension after download.
    response.header("Content-Disposition", "attachment; filename=FILENAME.FILE_EXTENSION"); 
    return response.build();
}
--------

== @Produces Annotation

@Produces annotation is used to specify the MIME media types that can be produced and sent back to the client. If @Produces is applied at the class level, all the methods in a resource can produce the specified MIME types by default. If applied at the method level, the annotation overrides any @Produces annotations applied at the class level.

If no methods in a resource are able to produce the MIME type in a client request, the JAX-RS runtime sends back an HTTP “406 Not Acceptable” error.

The value of @Produces is an array of String of MIME types.
For example:@Produces({"image/jpeg,image/png"})

The following example shows how to apply @Produces at both the class and method levels:

[source,java]
--------
@Path("/myResource")
@Produces("text/plain")
public class SomeResource {
	@GET
	public String doGetAsPlainText() {
		...
	}

	@GET
	@Produces("text/html")
	public String doGetAsHtml() {
		...
	}
}

--------


= File upload from org.apache.cxf

*org.apache.cxf* provides option to upload files of different MIME (Multipurpose Internet Mail Extensions) types.

*Example:*

In JAX-RS, annotate the service method with @Consumes("multipart/mixed"). We define a regular interface of the service and annotate it with JAX-RS annotations:


[source,java]
--------
@SuppressWarnings("javadoc")
@Consumes("multipart/mixed")
@GET
@Path("/uploadFile")
public Response uploadFile() throws SQLException, IOException;
--------

And here is a simple implementation of the service:

[source,java]
--------
@POST 
@Consumes ("multipart/mixed") 
@Path ("/upload") 
public Response uploadFile( 
		// upload file to server                 
return null; 
}

--------

== @Consumes Annotation

The @Consumes annotation is used to specify which MIME media types that can be accepted, or consumed, from the client. If @Consumes is applied at the class level, all the response methods accept the specified MIME types by default. If applied at the method level, @Consumes overrides any @Consumes annotations applied at the class level.

If a resource is unable to consume the MIME type of a client request, the JAX-RS runtime sends back an HTTP 415 (“Unsupported Media Type”) error.

The value of @Consumes is an array of String of acceptable MIME types.
For example:@Consumes({"text/plain,text/html"})

The following example shows how to apply @Consumes at both the class and method levels:

[source,java]
--------
@Path("/myResource")
@Consumes("multipart/related")
public class SomeResource {
	@POST
	public String doPost(MimeMultipart mimeMultipartData) {
		...
	}

	@POST
	@Consumes("application/x-www-form-urlencoded")
	public String doPost2(FormURLEncodedProperties formData) {
		...
	}
}
--------


= MIME Types

