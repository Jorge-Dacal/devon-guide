=  Setting up and maintaining database schemas with Flyway


 
https://flywaydb.org/documentation/[Flyway]  is an open-source database migration tool. It strongly favors simplicity and convention over configuration.

== Why we use flyway?
Lets say we have our software and our database. Great. And this could very well all you need. 

But on most projects, this simple view of the world very quickly translates into this

image::images/devonfw-flyway-database-migration/Environments.png[,scaledwidth=80%]



We not only have to deal with one copy of environment, but with several. This presents a number of challenges in maintain the databases across various environments. 

Many projects still rely on manually applied sql scripts. And sometimes not even that (a quick sql statement here or there to fix a problem). And soon many questions arise:




*   What state is the database in on this machine?
*   Has this script already been applied or not?
*   Has the quick fix in production been applied in test afterwards?
*   How do you set up a new database instance?


 

More often  the answer to these questions is: We don't know. 


Database migrations(where flyway comes into picture) are a great way to regain control of this mess.

They allow you to:



* Recreate a database from scratch
* Make it clear at all times what state a database is in
* Migrate in a deterministic way from your current version of the database to a newer one.



== How it works?

 When you point Flyway to an empty database, it will try to locate its metadata table. As the database is empty, Flyway won't find it and will create it instead.
Now we have a database with a single empty table called SCHEMA_VERSION by default.

Immediately afterwards Flyway will begin scanning the filesystem or the classpath of the application for migrations. They can be written in either Sql or Java. 

The migrations are then sorted based on their version number and applied in order: 
As each migration gets applied, the metadata table is updated accordingly.

With the metadata and the initial state in place, we can now talk about migrating to newer versions. 

Flyway will once again scan the filesystem or the classpath of the application for migrations. The migrations are checked against the metadata table. If their version number is lower or equal to the one of the version marked as current, they are ignored.

They are then sorted by version number and executed in order: 
The metadata table is updated accordingly.

And that's it! Every time the need to evolve the database arises, whether structure (DDL) or reference data (DML), simply create a new migration with a version number higher than the current one. The next time Flyway starts, it will find it and upgrade the database accordingly.

A typical metadata table looks like below:
 

 

