= OASP4J Application structure 

The OASP4J archetype generates a Maven Modules Project. It has 3 Maven modules and a pom.xml file:

* https://github.com/devonfw/devon-guide/wiki/getting-started-oasp-app-structure#core-module[xxx-core]: This Maven Module Project contains the different Java classes in our application and the application configuration (beans definition, security configuration, access to database configuration, etc).

* xxx-server: This module is responsible for packaging the application as a WAR file. It has a dependency on the core module.

* pom.xml:

** Properties definition: Spring-boot version, Java version, server port, database port.

** Modules definition: Imports for 3 modules (core, EAR and server).

** Dependency Management: Spring-boot, OASP4J-BOM and JUnit dependencies. Also we can include Devonfw-BOM and Devonfw dependencies.

** Maven plugin compiler to compile the application to desired Java version.

The application is contained in the *core* module, so we are going to see what is contained in this module.

= Core Module

Core module contains the base classes and the base configuration for the application. It's divide in three package: Java, Resources and Test. 

image::images/oasp-app-structure/app-structure.png[App structure,width=60%]

Now, we are going to describe each of them. 

== Java 

The package java contains all Java File of the application, where we have the application and the configuration of it. This package contains the SpringBootApp and SpringBootBatchApp (main), the package general and all entity managements that we are going to create for the application. 

=== SpringBootApp and SpringBootBatchApp

*SpringBootApp* is the class that contains the main method to run the Spring Boot application. Spring Boot is responsible for escan the project and find the beans and configuration of the application. So this is the most important class in the application, because it's the application per se. You can read more about Spring Boot http://docs.spring.io/spring-boot/docs/current/reference/html/[here].

*SpringBootBatchApp* this class is responsible for run the batch process of the application. You can see more about the batch proces in OASP4J project https://github.com/oasp/oasp4j/wiki/guide-batch-layer[here].

=== General

The *general* package conteins all Java files of OASP4J application. It's divided in the next subpackages:

===== Common

Contains the reusable Java components of the OASP4J application. 

===== Dataaccess

This package contains the Java files that compone the Data Access layer of OASP4J application. You can see more about this layer https://github.com/oasp/oasp4j/wiki/guide-dataaccess-layer[here].

===== Gui.api

Contains the Java class that has the login page controller of OASP4J application.

===== Logic

Contains the logic layer of OASP4J application. The logic layer is the heart of the application and contains the main business logic. You can see more about it https://github.com/oasp/oasp4j/wiki/guide-logic-layer[here].

===== Service.impl.rest

Contains service layer of OASP4J application. The service layer is responsible to expose functionality of the logical layer to external consumers over a network via technical protocols. You can see more about it https://github.com/oasp/oasp4j/wiki/guide-service-layer[here].

== Resources 

The resources package contain the data of some specific functionality of the application. This data, can be configuration data for, e.g, database, security or another data configuration that can be accessed by the application.

This package is divide the config, db, META-INF and static folder. Also we have an *application.propertie* file in this package. You can see more about OASP4 Spring Boot configuration https://github.com/devonfw/devon-guide/wiki/getting-started-understanding-oasp4j-spring-boot-config[here]. 

===== config

In this folder we have largely the xml configuration file of the application. This application contains also some application.properties files that represent the context of the application when we run it in the embedded Tomcat server. You can see more about the modes of run an application https://github.com/devonfw/devon-guide/wiki/getting-started-running-sample-application[here].

The *cofing* folder is divided in the next sub-folders

*app

** batch: contains the configuration of the batch process. In the sample application, for example, we have the bill exports and products to import.

** common: contains the Spring bean configuration of Dozer. You can see more about OASP4j Bean-Mapping https://github.com/oasp/oasp4j/wiki/guide-beanmapping[here]. 


===== db


===== META-INF

===== static

===== application.properties


image::images/oasp-app-structure/config-structure.png[App structure,width=40%]


== Test



