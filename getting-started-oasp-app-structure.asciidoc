:toc: macro
toc::[]

= OASP4J Application Structure 

The OASP4J archetype generates a Maven Modules Project. It has 3 Maven modules and a _pom.xml_ file:

* xxx-core: This Maven Module Project contains the different Java classes and the application configuration (beans definition, security configuration, access to database configuration, etc).

* xxx-server: This module is responsible for packaging the application as a WAR file. It has a dependency on the core module.

* pom.xml is a configuration file that contains:

** Properties definition: Spring-boot version, Java version, server port, database port.

** Modules definition: Imports for modules (core and server).

** Dependency Management: Spring-boot, OASP4J-BOM and JUnit dependencies. Also we can include Devonfw-BOM and Devonfw modules dependency.

** Maven plugin compiler to compile the application to desired Java version.


== Core Module

The Core module of the project contains the base classes and the base configuration of the application. It's divided in three main packages: _java_, _resources_ and _test_.

image::images/oasp-app-structure/app-structure.png["App structure",width="150",link="images/oasp-app-structure/app-structure.png"]

Following section explains each of the package in detail:

=== Java 

The _java_ package contains all Java files that implement the application and its configurations.

==== SpringBootApp and SpringBootBatchApp 

*SpringBootApp* is the class that contains the main method to run the Spring Boot application. Spring Boot is responsible to scan the project and find the beans and configuration of the application. Therefore, this is the most important class in the application as it's the basis for running the application. Read more about Spring Boot http://docs.spring.io/spring-boot/docs/current/reference/html/[here].

*SpringBootBatchApp* class is responsible to run the batch process of the application. Find more about the batch process in OASP4J project link:cookbook-batch-layer[here].

==== General 

The *general* package contains all Java files of OASP4J application. It is further divided in the following sub-packages:

====== Batch impl config

This first package stores a class _BeansBatchConfig.java_ that contains the configuration of batch beans.

====== Common

Contains the reusable Java components of OASP4J application. 

====== Dataaccess

This package contains the Java files that compose the Data Access layer of OASP4J application. Find more about this layer link:getting-started-Data-Access-Layer[here].

====== Gui.api

Contains the Java class that has the login page controller of OASP4J application.

====== Logic

Contains the logic layer of OASP4J application. The logic layer is the heart of the application and contains the main business logic. Find more about it link:getting-started-logic-layer[here].

====== Service.impl.rest

Contains the service layer of OASP4J application. The service layer is responsible for exposing the functionality of the logical layer to external consumers over a network via technical protocols. Find more about it link:getting-started-Creating-Rest-Service[here].
 
==== Management packages 

This packages contains the use cases in which the logic of the application is divided. Each management package defines the Entities, DAOs, ETOs, CTOs, REST services, web services and the CRUD operators related to its use case. Find more about how to create a CRUD operators in OASP4J project link:getting-started-crud-operations[here].
 
=== Resources 

The resources package contains the data related to some specific functionality of the application. This data can be both configuration files (database, security) and other resources that the application may need such as template files or content files.

This package is divided in four folders: _config_, _db_, _META-INF_ and _static_. This package also contains *application.properties* file. Read more about OASP4J Spring Boot configuration link:getting-started-understanding-oasp4j-spring-boot-config[here]. 

image::images/oasp-app-structure/config-structure.png["App structure 2",width="250",link="images/oasp-app-structure/config-structure.png"]

====== config

This folder contains mostly all the xml configuration file of the application. This folder also contains some *application.properties* files that represents the context of the application while running it with the embedded Tomcat server. See more about how to run an OASP4J application link:getting-started-running-sample-application[here].

The *config* folder has a folder called *app* this folder is divided in the following sub-folders:

** batch: contains the configuration of the batch process. In the Sample Application, for example, we have the bill exports and products to import.

** common: contains the Spring bean configuration of http://dozer.sourceforge.net/documentation/about.html[Dozer]. find more about OASP4j Bean-Mapping link:getting-started-bean-mapping-using-dozer[here]. 

** gui: this folder contains the *dispatcher-servlet.xml*. The _DispatcherServlet_ will take help from _ViewResolver_ to pickup the defined view for the request.

** security: contains the *access-control-schema.xml* file that contains the definition of groups/roles and permissions of the application.

** websocket: contains the scan component package definition for websockects.

====== db

This folder holds the SQL files which contains the script templates to create the database schema and tables definition.

====== META-INF

Contains the *orm.xml* file that allows us to declare named queries that can be called in the code of the application to do a specific SQL queries.

====== static

Contains the *index.html* file of the application. This view contains ,by default, a simple logout button and the link to a list of services of the application. 

====== application.properties

Contains the specific properties values of the application. This file is taked into account by the application when running in an link:getting-started-running-sample-application#external-tomcat-server[external server] (not the embedded).

As you can see we have an application-<name>.properties, this kind of properties are called profile and we can active a determinate profile in *application.properties* as required. See more about Spring profiles http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html[here]. Also, find how to create a new database profile in OASP4j getting-started-database-configuration#create-a-spring-profile[here], in order to understand better.

=== Test

The package test contains all that is required to test the application. It is divided in the following sub packages:

** java: contains the Unit Tests of the application that will allow us to keep control of the right functionality of the application. Find more about the Unit Test and TDD methodology link:getting-started-writing-unittest-cases[here] and https://github.com/oasp/oasp4j/wiki/guide-testing[here]

** resources: contains the configuration and data that is required to run the test cases.

== Server Module

This module contains two important files:

* lockback.xml: This file is in the _resources_ folder and responsible for configuring the log.

* pom.xml: This file has Maven configuration for packaging the application as a WAR. Also, this file has a profile to package the JavaScript client ZIP file into the WAR.