:toc: macro
toc::[]

= Create New Application

You don’t have to start from scratch when creating a new client application. You can use our oasp-generator for yeoman for scaffolding an AngularJS application template.

For creating the project you can use devcon, a cross-platform command line tool or do it manually using the oasp generator.

image::images/devconlogo_imgonly.png[,width="50"]
.*Using devcon*
[NOTE]
====
You can automate these processes using devcon. With the `devon oasp4js create` command you can create a new oasp4js project link:devcon-command-reference#oasp4js-create[learn more here].
====

== generator-oasp

> http://yeoman.io[Yeoman] generator for AngularJS applications powered by https://github.com/oasp/oasp4js[OASP4JS].


=== Getting Started

If you are going to create the application manually before you start to use generator-oasp it is important to install the prerequisites. You will need the Node.js, Bower and Gulp.

1. Open a Devon command prompt by executing the batch file console.bat in the root folder of the distribution.
1. Most of tools used in oasp4js need the Node.js platform and its package manager (npm).
1. Node.js is provided by default within the Devon distribution.  For installing Bower and Gulp (skip these steps if you already have Bower and Gulp installed in your machine; just check the version for both):

Bower is a front-end package manager. Install the Bower globally using the npm. Type the following command in the command line tool:
----
npm install –g bower
----
In order to check if Bower was correctly installed you can check its version by typing:
----
bower --version
----
Gulp is a streaming build system. Install the Gulp globally using the npm. Type the following command in the command line tool:
----
npm install –g gulp
----
In order to check if Gulp was correctly installed you can check its version by typing:
----
gulp –version
----

If you use a proxy to connect to the Internet, you have to manually configure it for npm:

Open a command line in the folder C.\Users\{user}\ and type:
----
echo "" > .npmrc
----
This is going to create a new empty file named .npmrc

To configure npm, you need to open the file .npmrc and then add the following configuration:
----
proxy=http://user:password@proxy:port
https-proxy=http://user:password@proxy:port
http-proxy=http://user:password@proxy:port
----

=== Running of application in Linux
If, one wants to run sample restaurant application in Linux environment,follow these steps:
*  Open a terminal inside devon distribution, and execute env.sh script as below
----
. env.sh

----
* Traverse to directory where OASP4JS code is present.
* Change below mentioned line as shown in _package.json_ file.

=== Why it is worth using

==== It offers more than other application seeds

There are various JavaScript/AngularJS application seeds such as https://github.com/angular/angular-seed[angular-seed] or https://www.npmjs.org/package/angularjs-seed[angularjs-seed]. All of them are operational, but they focus on a quick & easy start and work well for small-scale projects. oasp4js is built as a base for bigger, modularized, enterprise projects, where different modules are often developed independently and simultaneously by many teams.

==== It does not reinvent the wheel

oasp4js just brings its idea on an application structure and makes use of well-known tools such as http://gulpjs.com/[Gulp] or http://bower.io/[Bower] which support developers in their activities. This all makes coding, testing and building the application extremely efficient.

=== What is Yeoman

Trick question. It's not a thing. It's this guy:

image:http://i.imgur.com/JHaAlBJ.png[,width="450",link="http://i.imgur.com/JHaAlBJ.png"]

Basically, he wears a top hat, lives in your computer, and waits for you to tell him what kind of application you wish to create.

Not every new computer comes with a Yeoman pre-installed. He lives in the https://npmjs.org[npm] package repository. You only have to ask for him once, then he packs up and moves into your hard drive. *Make sure you clean up, he likes new and shiny things.*

Every step below is going to take several minutes depending on your network connection.
To install yeoman, run:

....
npm install -g yo
....

_Hint: If you are using Windows Command Line it is recommended to run it as an administrator._

==== Yeoman Generators

Yeoman travels light. He didn't pack any generators when he moved in. You can think of a generator like a plug-in. You get to choose what type of application you wish to create, such as a Backbone application or even a Chrome extension.

To install generator-oasp from npm, run:

....
npm install -g generator-oasp
....

Create a directory in which you will later call the generator:

....
mkdir <directory_name>
cd <directory_name>
....

Finally, initiate the generator in the created directory:

....
yo oasp
....

If you use a proxy to connect to the Internet, please follow the steps for configuring bower properly:

To configure bower proxy we need to open the file `.bowerrc`, is on oasp4js application folder. Then add the following configuration:

----
{
    "directory": "bower_components",
    "proxy": "http://user:password@proxy:port",
    "https-proxy":"http://user:password@proxy:port"
}
----

Obviously, you only can do this when your project has already been created as the file `.bowerrc` has to be inside the project folder.

This should be done while the command `yo oasp` is being executed otherwise we will have to execute again the command.
If we had to execute the command again, it will ask you to override the file `.bowerrc` so you have to enter ‘n’ to not override it. 

=== Enjoy

Please note that all commands below must be executed in project root directory.

==== Developing

Once the project initialization has been done successfully we can start running our application.

Start the application using Gulp in the project root directory:

----
gulp serve
----

The above Gulp's task opens the application in your default browser and watches for any HTML/JavaScript/CSS changes. Once you do one, the page is reloaded automatically. The url that throws is: 'http://localhost:9000/#/main/welcome'

If for some reason your client should talk to the server configured in a different way, you can configure the server details in the client's configuration file, <app_dir>\config.json, in the proxy part:

[source,json]
----
{
    "proxy": {
        "baseUrl": "http://localhost:8081",
        "context": "/sampleapp-server"
    }
}
----

==== Testing

Run application's Jasmine tests:

....
gulp test:tdd
....

This Gulp's task uses the Karma test runner to execute Jasmine tests (against the PhantomJS) and watches for any change in your JavaScript files (both sources and specs).  Test Driven Development has never been easier :)

If you would like to run the tests against a real browser (rather than against the PhantomJS) or use it to debug a test, call:

....
gulp test:tdd:debug
....

==== Building

Build the application:

....
gulp serve:dist
....

The above Gulp's task creates the `myapp/dist` directory and put there HTML documents, CSS files (compiled from Less files) and JavaScript files (merged, minimized and obfuscated).
