:toc: macro
toc::[]

= The Winauth module

== Authentication with Active Directory

Active Directory (AD) is a directory service that Microsoft developed for Windows domain networks. It is included in most Windows Server operating systems as a set of processes and services. Initially, Active Directory was only in charge of centralized domain management. Starting with Windows Server 2008, however, Active Directory became an umbrella title for a broad range of directory-based identity-related services.

For more information visit https://en.wikipedia.org/wiki/Active_Directory[wikipedia].

=== Include Winauth in a Devon project

Winauth module provides you a simple authentication for your Devon applications. If you want to implement this kind of authentication in a Devon project you need to follow the next steps:

==== Step 1: Add the module dependency

Include the dependency of the module in your pom.xml

[source,xml]
----
<dependency>
      <groupId>com.capgemini.devonfw.modules</groupId>
      <artifactId>devonfw-winauth</artifactId>
      <version>2.1.0-SNAPSHOT</version>
</dependency>
----

|=======================
|image::images/warning.png[,width="100"]      | bla bla bla
|=======================

[subs="quotes"]
++++++++++++++++++++++++++++++++++++++
<table border="1px solid gray"><tr>
  <td><img src="images/warning.png" 
alt="IMAGE ALT TEXT HERE" width="100" height="100" /></td>
  <td>*Cell 2*</td>
</tr></table>
++++++++++++++++++++++++++++++++++++++

image::images/warning.png[,width="100"] 

[WARNING ![warning](images/warning.png)]
====
The IP modules of Devonfw are stored in https://www.jfrog.com/artifactory/[Artifactory]. In case you do not have access to that repository, as the modules are included in the Devonfw distribution, you can install them manually. To do so open a Devonfw command line (_console.bat_), go to `Devon-dist\workspaces\examples\devon` and execute the command `mvn install`.
====

==== Step 2: Security configuration 

Create a variable of the class _AuthenticationManagerAD_ in `general/configuration/BaseWebSecurityConfig.java`

[source,java]
----
@Inject
private AuthenticationManagerAD authenticationManagerAD;
----

==== Step 3: Define the provider

Also in the `BaseWebSecurityConfig.java` class add the LDAP provider to the AuthenticationManagerBuilder in the `init()` method. 

[source,java]
----
@PostConstruct
public void init() throws Exception {
this.authenticationManagerBuilder.authenticationProvider(this.authenticationManagerAD.LdapAuthenticationProvider());
}
----

==== Step 4: Implement the UserDetailsContextMapper

Implement the class UserDetailsContextMapper to build the UserDetails with the data of the user. 

[source,java]
----
import com.capgemini.devonfw.module.winauth.common.api.AuthenticationSource;
import com.capgemini.devonfw.module.winauth.common.api.UserData;
import com.capgemini.devonfw.module.winauth.common.impl.security.GroupMapperAD;
import com.capgemini.devonfw.module.winauth.common.impl.security.PrincipalProfileImpl;

@Named
@Component
public class UserDetailsContextMapperImpl implements UserDetailsContextMapper {

  private static final Logger LOG = LoggerFactory.getLogger(UserDetailsContextMapperImpl.class);

  @Inject
  private AuthenticationSource authenticationSource;

  @Inject
  private GroupMapperAD groupMapperAD;

  @Inject
  private AccessControlProvider accessControlProvider;

  /**
   * @return authenticationSource
   */
  public AuthenticationSource getAuthenticationSource() {

    return this.authenticationSource;
  }

  /**
   * @param authenticationSource new value of authenticationSource.
   */
  public void setAuthenticationSource(AuthenticationSource authenticationSource) {

    this.authenticationSource = authenticationSource;
  }

  /**
   * @param accessControlProvider new value of accessControlProvider.
   */
  public void setAccessControlProvider(AccessControlProvider accessControlProvider) {

    this.accessControlProvider = accessControlProvider;
  }

  /**
   * @return groupMapperAD
   */
  public GroupMapperAD getGroupMapperAD() {

    return this.groupMapperAD;
  }

  /**
   * @param groupMapperAD new value of groupMapperAD.
   */
  public void setGroupMapperAD(GroupMapperAD groupMapperAD) {

    this.groupMapperAD = groupMapperAD;
  }

  @Override
  public UserDetails mapUserFromContext(DirContextOperations ctx, String username,
      Collection<? extends GrantedAuthority> authorities) {

    UserData user = new UserData(username, "", authorities);

    try {
      Attributes attributes = this.authenticationSource.searchUserByUsername(username);

      String cn = attributes.get("cn").toString().substring(4);// Username
      String givenname = attributes.get("givenname").toString().substring(11); // FirstName
      String sn = attributes.get("sn").toString().substring(4);// LastName
      String memberOf = attributes.get("memberof").toString().substring(10); // Groups

      PrincipalProfileImpl userProfile = new PrincipalProfileImpl();
      userProfile.setName(cn);
      userProfile.setFirstName(givenname);
      userProfile.setLastName(sn);
      userProfile.setId(cn);
      ArrayList<String> groups = this.groupMapperAD.groupsMapping(memberOf);

      userProfile.setGroups(groups);

      // determine granted authorities for spring-security...
      Set<GrantedAuthority> authoritiesAD = new HashSet<>();
      Collection<String> accessControlIds = groups;
      Set<AccessControl> accessControlSet = new HashSet<>();
      for (String id : accessControlIds) {
        boolean success = this.accessControlProvider.collectAccessControls(id, accessControlSet);
        if (!success) {
          LOG.warn("Undefined access control {}.", id);
          // authorities.add(new SimpleGrantedAuthority(id));
        }
      }
      for (AccessControl accessControl : accessControlSet) {
        authoritiesAD.add(new AccessControlGrantedAuthority(accessControl));
      }

      user = new UserData(username, "", authoritiesAD);
      user.setUserProfile(userProfile);
    } catch (Exception e) {
      e.printStackTrace();
      UsernameNotFoundException exception = new UsernameNotFoundException("Authentication failed.", e);
      LOG.warn("Failed com.capgemini.devonfw.module.winauth.common.impl.security get user {} in Active Directory."
          + username + exception);
      throw exception;
    }
    return user;
  }

  @Override
  public void mapUserToContext(UserDetails user, DirContextAdapter ctx) {

  }
}
----

[NOTE]
====
As you can see in the code, you build the user with the Active Directive information. And the map of the groups in the configuration.

You can build this User whatever you want. For e.g. you could use a query to Active Directory (like the example) or a query to your own User database.  
====

==== Step 5: Configure the LDAP-AD connection

Now we need to configure the LDAP parameters in application.properties. By default the winauth module work with a LDAP Authentication and a query to AD to have the authorization, so we need to define all these properties. If you are using a customized UserDetails without AD query you don't need to define the AD properties. The same happen if you don't use the Role Mapping class.

[source,xml]
----
#Server configuration 
#LDAP
devon.winauth.ldap.url=ldap://mydomain.com/
devon.winauth.ldap.encrypt=true
devon.winauth.ldap.keyPass=keyPass
devon.winauth.ldap.password=ENC(...)
devon.winauth.ldap.userDn=cn=user,DC=mydomain,DC=com
devon.winauth.ldap.patterns=ou=Users
devon.winauth.ldap.userSearchFilter=(sAMAccountName={0})
devon.winauth.ldap.userSearchBase=

#AD
devon.winauth.ad.url=ldap://mydomain.com/OU=Users,DC=MYDOMAIN,DC=COM
devon.winauth.ad.domain=mydomain.com
devon.winauth.ad.username=user
devon.winauth.ad.encrypt=true
devon.winauth.ad.keyPass=keyPass
devon.winauth.ad.password=ENC(...)
devon.winauth.ad.userSearchFilter=(uid={0})
devon.winauth.ad.userSearchBase=
devon.winauth.ad.searchBy=sAMAccountName
devon.winauth.ad.rolePrefix=^(.*)CN=([^,]*),.*,DC=MYDOMAIN,DC=COM$

#Roles mapping
devon.winauth.groups.Chief=S-ESPLAN
devon.winauth.groups.Waiter=S-ECOMU7
devon.winauth.groups.Cook=dlescapgemini.grado-a
devon.winauth.groups.TESTGROUP=testGroup
----

Now you can run your application and show the login form with the Active Directory authentication.

[NOTE]
====
As you can see the property password is encrypt. You can find more information about it https://github.com/devonfw/devon/wiki/encrypting-properties[here]. Also you can put the password without encrypt by default.
==== 

=== Using the UserDetailsContextMapper with AD
As is mentioned above you can implement your own _UserDetailsContextMapper_ or use the _UserDetailsContextMapper_ gived in this tutorial. If you use the last one, you need to keep in a count the next points.

==== Roler/Groups mapper

Winauth includes a group mapper that gives a simple tool to map the groups of the Active Directory with a roles/groups of your application. To use it you need to configure the mapping just like that:

[source,xml]
----
#Roles mapping
devon.winauth.groups.SESPLAN=S-ESPLAN
devon.winauth.groups.ECOMU7=S-ECOMU7
devon.winauth.groups.GradoA=dlescapgemini.grado-a
devon.winauth.groups.TESTGROUP=testGroup
----

Now, if you ask the server for the current user of the application, you will see the user data with his groups. 

==== Service CurrentUser

If you use the basic _UserDetailsContextMapper_ that winauth implements, you need to modify the service _currentuser_ in the class `general/service/impl/rest/SecurityRestServiceImpl.java`. 

[source,xml]
----
  @Produces(MediaType.APPLICATION_JSON)
  @GET
  @Path("/currentuser/")
  @PermitAll
  public UserDetailsClientToAD getCurrentUser(@Context HttpServletRequest request) {

    if (request.getRemoteUser() == null) {
      throw new NoActiveUserException();
    }
    return UserData.get().toClientTo();
  }
----

[NOTE]
====
You need to _import_ the classes `UserData` and `UserDetailsClientToAD` of the winauth module.
====

== Single Sign On

Single sign-on (SSO) is a property of access control of multiple related, but independent software systems. With this property a user logs in with a single ID and password to gain access to a connected system or systems without using different usernames or passwords, or in some configurations seamlessly sign on at each system.

For more information visit https://en.wikipedia.org/wiki/Single_sign-on[wikipedia].

=== Include Winauth SSO in a Devon project

Winauth module provides you a simple SSO authentication for your Devon applications. If you want to implement this kind of authentication in a Devon project you need to follow the next steps:

==== Step 1: Add the dependency

Include the dependency of the module in your pom.xml

[source,xml]
----
<dependency>
      <groupId>com.capgemini.devonfw.modules</groupId>
      <artifactId>devonfw-winauth</artifactId>
      <version>2.1.0-SNAPSHOT</version>
</dependency>
----

==== Step 2: Configure the security 

Create a variable of the class WinauthSSO in `general/configuration/BaseWebSecurityConfig.java`

[source,java]
---- 
private WinauthSSO sso;

/**
   * @return sso
   */
  public WinauthSSO getSso() {

    return this.sso;
  }

  /**
   * @param sso new value of {@link #getsso}.
   */
  @Inject
  public void setSso(WinauthSSO sso) {

    this.sso = new WinauthSSO();
  }
----

==== Step 3: Define the security entry point and filter

Also in the `BaseWebSecurityConfig.java` class add the winauth SSO configuration down in the void configure(HttpSecurity) method

[source,java]
----
@Override
public void configure(HttpSecurity http) throws Exception {
...
//Winauth SSO configuration
 http.addFilterAfter(this.sso.getWaffleNegotiateSecurityFilter(), BasicAuthenticationFilter.class)
        .exceptionHandling().authenticationEntryPoint(this.sso.getNegotiateSecurityFilterEntryPoint());
}
----

And that's all, now you have a simple SSO Authentication.

[NOTE]
====
We need to be carefully with the service currentuser because SSO by default is not compatible with the information of the `UserDetailsClientTo`class. You need to adapt this class or use a customized SSO User Details (next chapter in the wiki). 
====

=== Customized Winauth SSO User Details

With the last steps you have a very simple authentication and authorization with Windows credentials. In a standard scenario you may want to implement your own User Details so we are going to show how to implement it for our SSO authentication.

==== Step 1: Create customized filter

The idea is rebuild the default filter `NegotiateSecurityFilter`, we can create a complete new filter or, like this example, just modify some methods. In this case we are going to modify `boolean setAuthentication(...)`, this method is called by the method `void doFilter(...)` (we can modify this method too) when the authentication is successful, so we are going to build here our UserDetails.

[source,java]
----
/**
 * This is a dummy implementation of a customized NegotiateSecurityFilter.
 *
 * @author jhcore
 */
public class NegotiateSecurityFilterCustomized extends NegotiateSecurityFilter {
  /** The Constant LOGGER. */
  private static final Logger LOGGER = LoggerFactory.getLogger(NegotiateSecurityFilterCustomized.class);

  private Usermanagement usermanagement = new UsermanagementDummyImpl();

  private AccessControlProvider accessControlProvider;

  /**
   * The constructor.
   *
   * @param accessControlProvider is the provider that help us to get the permissions
   */
  public NegotiateSecurityFilterCustomized(AccessControlProvider accessControlProvider) {
    super();
    this.accessControlProvider = accessControlProvider;
  }

  /**
   * The constructor.
   */
  public NegotiateSecurityFilterCustomized() {
    super();
  }

  @Override
  public void doFilter(final ServletRequest req, final ServletResponse res, final FilterChain chain)
      throws IOException, ServletException {

    // Here you can customize your own filer functionality
    super.doFilter(req, res, chain);
  }

  @Override
  protected boolean setAuthentication(final HttpServletRequest request, final HttpServletResponse response,
      final Authentication authentication) {

    try {
      String principal[] = authentication.getPrincipal().toString().split("\\\\", 2);

      String username = principal[1];

      UserProfile profile = this.usermanagement.findUserProfileByLogin(username);

      UsernamePasswordAuthenticationToken auth =
          new UsernamePasswordAuthenticationToken(profile, getAutoritiesByProfile(profile));

      SecurityContextHolder.getContext().setAuthentication(auth);
    } catch (Exception e) {
      NegotiateSecurityFilterCustomized.LOGGER.warn("error authenticating user");
      NegotiateSecurityFilterCustomized.LOGGER.trace("", e);
    }

    return true;
  }

  private Object getAutoritiesByProfile(UserProfile profile) {

    Set<GrantedAuthority> authorities = new HashSet<>();
    Collection<String> accessControlIds = new ArrayList<>();
    accessControlIds.add(profile.getRole().getName());
    Set<AccessControl> accessControlSet = new HashSet<>();
    for (String id : accessControlIds) {
      boolean success = this.accessControlProvider.collectAccessControls(id, accessControlSet);
      if (!success) {
        // authorities.add(new SimpleGrantedAuthority(id));
      }
    }
    for (AccessControl accessControl : accessControlSet) {
      authorities.add(new AccessControlGrantedAuthority(accessControl));
    }
    return authorities;
  }
}
----

As you have seen this example uses the `UsermanagementDummyImpl` that is created when you create a new Devon application. Feel free to customize your own filter, just use the above class with a customized Usermanagement.

==== Step 2: Create and configure WinauthSSO

Now we are going to create a WinauthSSO variable and configure the filter

[source,java]
----
private WinauthSSO sso;

  /**
   * @return sso
   */
  public WinauthSSO getSso() {

    return this.sso;
  }

  /**
   * @param sso new value of {@link getsso}.
   */
  @Inject
  public void setSso(WinauthSSO sso) { 
    this.sso = new WinauthSSO(new NegotiateSecurityFilterCustomized(accessControlProvider()));
  }

  @Bean
  public AccessControlProvider accessControlProvider() {

    return new AccessControlProviderImpl();
  }
----

As you can see the Filter that we are using needs a AccessControlProvider, we have one configured in the WebSecurityConfig so we just need to pass it to the filter by param.

==== Step 3: The security entry point and filter

Add the winauth SSO configuration down in the void configure(HttpSecurity) method

[source,java]
----
@Override
public void configure(HttpSecurity http) throws Exception {
...
//Winauth SSO configuration
 http.addFilterAfter(this.sso.getWaffleNegotiateSecurityFilter(), BasicAuthenticationFilter.class)
        .exceptionHandling().authenticationEntryPoint(this.sso.getNegotiateSecurityFilterEntryPoint());
}
----

And that's all, now we have a simple SSO Authentication with a custom UserDetails and we can use the server _current user_ by default without problems.